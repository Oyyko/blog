<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oyyko&#39;s Blog</title>
    <link>https://blog.oyyko.com/</link>
    <description>Recent content on Oyyko&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 05 Jul 2023 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://blog.oyyko.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Archlinux/Manjaro Install Guide</title>
        <link>https://blog.oyyko.com/posts/arch_install/</link>
        <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
        
        <guid>https://blog.oyyko.com/posts/arch_install/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/arch_install/ -&lt;p&gt;manjaro I3新电脑配置&lt;/p&gt;
&lt;p&gt;假设已经安装好了manjaro i3，接下来要做的是：&lt;/p&gt;
&lt;h2 id=&#34;基本装机-按顺序执行以下操作&#34;&gt;基本装机 按顺序执行以下操作&lt;/h2&gt;
&lt;h3 id=&#34;换源&#34;&gt;换源&lt;/h3&gt;
&lt;p&gt;编辑&lt;code&gt;/etc/pacman.d/mirrorlist&lt;/code&gt;
内容改为&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;加入archlinuxcn源并安装yay&#34;&gt;加入archlinuxcn源并安装yay&lt;/h3&gt;
&lt;p&gt;在 &lt;code&gt;/etc/pacman.conf&lt;/code&gt; 文件末尾添加以下两行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[archlinuxcn]
Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后通过以下命令安装 archlinuxcn-keyring 包导入 GPG key。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo pacman -Sy archlinuxcn-keyring
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后就可以用yay 安装各种软件了&lt;/p&gt;
&lt;p&gt;记得先&lt;code&gt;sudo pacman -Syyu&lt;/code&gt;一下。&lt;/p&gt;
&lt;h3 id=&#34;科学上网&#34;&gt;科学上网&lt;/h3&gt;
&lt;p&gt;由于安装某些软件的时候，yay会从国外下载，所以要先科学上网才能尽情安装想要的软件。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yay -S clash-for-windows-bin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后导入已有的订阅。
之后在终端中设置(例如加入到&lt;code&gt;~/.zshrc&lt;/code&gt;中)：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export https_proxy=http://127.0.0.1:7890;
export http_proxy=http://127.0.0.1:7890;
export all_proxy=socks5://127.0.0.1:7890;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于i3wm等无法设置系统级代理的桌面环境，请把chrome的启动改为&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bindsym $mod+F2 exec google-chrome-stable --proxy-server=&amp;#34;socks5://127.0.0.1:7890&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样chrome也可以自动使用代理上网了。&lt;/p&gt;
&lt;h3 id=&#34;安装输入法&#34;&gt;安装输入法&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yay -S fcitx5-im
yay -S base-devel
yay -S fcitx5-rime
yay -S rime-cloverpinyin
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置fcitx5的环境变量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nano ~/.pam_environment
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;内容为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;GTK_IM_MODULE DEFAULT=fcitx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;QT_IM_MODULE  DEFAULT=fcitx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;XMODIFIERS    DEFAULT=\@im=fcitx
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SDL_IM_MODULE DEFAULT=fcitx
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;创建并写入rime-cloverpinyin的输入方案：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nano ~/.local/share/fcitx5/rime/default.custom.yaml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;内容为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;patch:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;#34;menu/page_size&amp;#34;: 5
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  schema_list:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    - schema: clover
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;安装中文维基百科词库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;yay -S fcitx5-pinyin-zhwiki-rime
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;设置fctix5自动启动：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;nano ~/.i3/config
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;加入&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;exec --no-startup-id fcitx5
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;安装geek字体&#34;&gt;安装geek字体&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yay -S nerd-fonts-jetbrains-mono
yay -S ttf-jetbrains-mono
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;之后把终端的字体改为该字体。例如更改Konsole的配置，如果默认终端不是Konsole建议改为Konsole。&lt;/p&gt;
&lt;h3 id=&#34;安装常用软件&#34;&gt;安装常用软件&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo pacman -S ntfs-3g # 使系统可以识别 NTFS 格式的硬盘
sudo pacman -S adobe-source-han-serif-cn-fonts wqy-zenhei # 安装几个开源中文字体。一般装上文泉驿就能解决大多 wine 应用中文方块的问题
sudo pacman -S noto-fonts noto-fonts-cjk noto-fonts-emoji noto-fonts-extra # 安装谷歌开源字体及表情
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yay -S typora-free
yay -S visual-studio-code-bin
yay -S google-chrome
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一些常用命令的Rust版本：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yay -S fd bat exa ripgrep procs dust 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;安装latex&#34;&gt;安装latex&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo pacman -S texlive-most texlive-lang
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置vscode-latexworkshop使用xelatex为默认&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/Haulyn5/article/details/124128533&#34;&gt;https://blog.csdn.net/Haulyn5/article/details/124128533&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;修改settings.json&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;latex-workshop.latex.tools&amp;#34;: [

        {
            &amp;#34;name&amp;#34;: &amp;#34;latexmk&amp;#34;,
            &amp;#34;command&amp;#34;: &amp;#34;latexmk&amp;#34;,
            &amp;#34;args&amp;#34;: [
                &amp;#34;-xelatex&amp;#34;,
                &amp;#34;-synctex=1&amp;#34;,
                &amp;#34;-interaction=nonstopmode&amp;#34;,
                &amp;#34;-file-line-error&amp;#34;,
                &amp;#34;%DOC%&amp;#34;
            ],
            &amp;#34;env&amp;#34;: {}
        },
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;安装zsh&#34;&gt;安装zsh&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo pacman -S zsh zsh-autosuggestions zsh-syntax-highlighting zsh-completions
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更改默认shell&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;chsh -s /usr/bin/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于Konsole需要修改它的配置文件来改变它启动的时候默认使用的shell&lt;/p&gt;
&lt;p&gt;由于manjaro i3有自带的zsh配置已经够用，因此这里我们暂时不使用oh my zsh&lt;/p&gt;
&lt;h3 id=&#34;输出炫酷neofetch&#34;&gt;输出炫酷neofetch&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yay -S lolcat neofetch
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;neofetch | lolcat
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你会得到炫酷的manjaro图案和你的电脑的基本信息显示。&lt;/p&gt;
&lt;h3 id=&#34;git配置&#34;&gt;GIT配置&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git config --global  user.name &amp;#34;111&amp;#34; 
git config --global  user.email &amp;#34;111@111.111&amp;#34;   
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;配置好的gitconfig文件在&lt;code&gt;~/.gitconfig&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;github-ssh--配置&#34;&gt;github ssh  配置&lt;/h3&gt;
&lt;p&gt;生成新 SSH 密钥&lt;/p&gt;
&lt;p&gt;可在本地计算机上生成新的 SSH 密钥。 生成密钥后，可以将密钥添加到您在 GitHub.com 上的帐户，以启用通过 SSH 进行 Git 操作的身份验证。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssh-keygen -t ed25519 -C &lt;span style=&#34;color:#63c381&#34;&gt;&amp;#34;your_email@example.com&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;之后&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cat ~/.ssh/id_ed25519.pub
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后在github网站上加入SSH KEY即可。&lt;/p&gt;
&lt;h3 id=&#34;配置ssh-使用代理&#34;&gt;配置SSH 使用代理&lt;/h3&gt;
&lt;p&gt;安装netcat&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo pacman -S netcat                                                                    
:: 有 2 个软件包可提供 netcat ：
:: 软件仓库 extra
   1) gnu-netcat
:: 软件仓库 community
   2) openbsd-netcat

输入某个数字 ( 默认=1 ): 2
正在解析依赖关系...
正在查找软件包冲突...

软件包 (1) openbsd-netcat-1.219_1-1

下载大小：      0.02 MiB
全部安装大小：  0.05 MiB

:: 进行安装吗？ [Y/n] 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要下载openbsd版本的&lt;/p&gt;
&lt;p&gt;之后&lt;/p&gt;
&lt;p&gt;修改 &lt;code&gt;~/.ssh/config&lt;/code&gt; 文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Host github.com
    User git
    ProxyCommand nc -v -x 127.0.0.1:7890 %h %p
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样git使用ssh方式的时候就可以走代理加速了。&lt;/p&gt;
&lt;h3 id=&#34;注释掉archlinuxcn源&#34;&gt;注释掉archlinuxcn源&lt;/h3&gt;
&lt;p&gt;装机的时候用一下可以了。由于manjaro毕竟和archlinux有区别，日常使用不需要打开这个源。可能会导致软件版本出现不兼容。&lt;/p&gt;
&lt;h2 id=&#34;杂项&#34;&gt;杂项&lt;/h2&gt;
&lt;h3 id=&#34;默认应用&#34;&gt;默认应用&lt;/h3&gt;
&lt;p&gt;默认应用的设置文件：vim ~/.config/mimeapps.list, 可以在里面更改默认浏览器&lt;/p&gt;
&lt;h3 id=&#34;i3配置&#34;&gt;I3配置&lt;/h3&gt;
&lt;p&gt;配置文件在 ~/.i3/config&lt;/p&gt;
&lt;h2 id=&#34;i3快捷键&#34;&gt;I3快捷键&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;MOD+9 锁屏
MOD+数字 切换工作区
MOD+Return 打开终端
MOD+F2 打开浏览器
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以在&lt;code&gt;~/.i3/config&lt;/code&gt;中查看快捷键。&lt;/p&gt;
- https://blog.oyyko.com/posts/arch_install/ - </description>
        </item>
    
    
    
        <item>
        <title>Scheme Review 1</title>
        <link>https://blog.oyyko.com/posts/scheme/</link>
        <pubDate>Tue, 04 Jul 2023 00:00:00 +0000</pubDate>
        
        <guid>https://blog.oyyko.com/posts/scheme/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/scheme/ -&lt;p&gt;&lt;a href=&#34;https://courses.cs.washington.edu/courses/cse341/04wi/lectures/14-scheme-quote.html&#34;&gt;https://courses.cs.washington.edu/courses/cse341/04wi/lectures/14-scheme-quote.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;quote&#34;&gt;Quote&lt;/h2&gt;
&lt;p&gt;Scheme has a convenient syntax for representing data literals: prefix any expression with &amp;rsquo; (single quote) and the expression, rather than being evaluated, will be returned as data:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;3&lt;/span&gt;        &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; =&amp;gt; 3                 (a number)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;hi&amp;#34;&lt;/span&gt;     &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; =&amp;gt; &amp;#34;hi&amp;#34;              (a string)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#56b6c2&#34;&gt;&amp;#39;a&lt;/span&gt;        &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; =&amp;gt; a                 (a symbol)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;4&lt;/span&gt;)  &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; =&amp;gt; (list &amp;#39;+ &amp;#39;3 &amp;#39;4)   (a list)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#dcaeea&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;b&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;c&lt;/span&gt;)  &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; =&amp;gt; (list &amp;#39;a &amp;#39;b &amp;#39;c)   (a list)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#c678dd&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#dcaeea&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;25&lt;/span&gt;)                   (&lt;span style=&#34;color:#00b1f7&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;list&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; =&amp;gt; (list &amp;#39;define &amp;#39;x &amp;#39;25)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; =&amp;gt; (list &amp;#39;define &amp;#39;x 25)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#c678dd&#34;&gt;lambda &lt;/span&gt;(&lt;span style=&#34;color:#00b1f7&#34;&gt;x&lt;/span&gt;) (&lt;span style=&#34;color:#ef8383&#34;&gt;+ &lt;/span&gt;&lt;span style=&#34;color:#dcaeea&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;3&lt;/span&gt;))            (&lt;span style=&#34;color:#00b1f7&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;list&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; =&amp;gt; (list &amp;#39;lambda (list &amp;#39;x) (list &amp;#39;+ &amp;#39;x &amp;#39;3))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; =&amp;gt; (list &amp;#39;lambda (list &amp;#39;x) (list &amp;#39;+ &amp;#39;x 3))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;As these examples illustrate, &amp;ldquo;quoted&amp;rdquo; data remains unevaluated, and provides a convenient way of representing Scheme programs. This is one of the big payoffs of Lisp&amp;rsquo;s simple syntax: since programs themselves are lists, it is extremely simple to represent Lisp programs as data. Compare the simplicity of quoted lists with the ML datatype that we used to represent ML expressions.&lt;/p&gt;
&lt;p&gt;This makes it simple to write programs that manipulate other programs &amp;mdash; it is easy to construct and transform programs on the fly.&lt;/p&gt;
&lt;p&gt;Note that names in Lisp programs are translated into symbols in quoted Lisp expressions. This is so that quoted names can be distinguished from quoted strings; consider the difference between the following two expressions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#c678dd&#34;&gt;define &lt;/span&gt;&lt;span style=&#34;color:#dcaeea&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;10&lt;/span&gt;)    &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; =&amp;gt; (list &amp;#39;define &amp;#39;x 10)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;define&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#dcaeea&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;10&lt;/span&gt;)  &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; =&amp;gt; (list &amp;#34;define&amp;#34; &amp;#39;x 10)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This distinction is probably the only good reason that strings and symbols are distinct data types in Lisp.&lt;/p&gt;
&lt;h2 id=&#34;quasiquote&#34;&gt;Quasiquote&lt;/h2&gt;
&lt;p&gt;Sometimes one doesn&amp;rsquo;t want to escape evaluation of an entire list. In this case, one can use the ` (backquote) operator, also called quasiquote with the , (comma) operator, also called unquote. Quasiquote behaves like quote, except that unquoted expressions are evaluated:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;`&lt;/span&gt;(&lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;,&lt;/span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;+ &lt;/span&gt;&lt;span style=&#34;color:#d19a66&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;4&lt;/span&gt;))   &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; =&amp;gt; &amp;#39;(1 2 7)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#c678dd&#34;&gt;quasiquote &lt;/span&gt;(&lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;2&lt;/span&gt; (&lt;span style=&#34;color:#c678dd&#34;&gt;unquote &lt;/span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;+ &lt;/span&gt;&lt;span style=&#34;color:#d19a66&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;4&lt;/span&gt;))))  &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;; =&amp;gt; &amp;#39;(1 2 7)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;- https://blog.oyyko.com/posts/scheme/ - </description>
        </item>
    
    
    
        <item>
        <title>In archlinux, chrome cannot be displayed normally under AMD.</title>
        <link>https://blog.oyyko.com/posts/chrome_amd/</link>
        <pubDate>Wed, 07 Jun 2023 00:00:00 +0000</pubDate>
        
        <guid>https://blog.oyyko.com/posts/chrome_amd/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/chrome_amd/ -&lt;p&gt;Solution:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rm -rf .config/google-chrome/Default/GPUCache
&lt;/code&gt;&lt;/pre&gt;- https://blog.oyyko.com/posts/chrome_amd/ - </description>
        </item>
    
    
    
        <item>
        <title>Value_categories_in_Cpp</title>
        <link>https://blog.oyyko.com/posts/value_categories_in_cpp/</link>
        <pubDate>Tue, 23 Aug 2022 15:20:51 +0800</pubDate>
        
        <guid>https://blog.oyyko.com/posts/value_categories_in_cpp/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/value_categories_in_cpp/ -&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;#define IS_XVALUE(expr) \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;(is_rvalue_reference&amp;lt;decltype((expr))&amp;gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;#define IS_PRVALUE(expr) \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;(!is_reference&amp;lt;decltype((expr))&amp;gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;#define IS_LVALUE(expr) \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;(is_lvalue_reference&amp;lt;decltype((expr))&amp;gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This is a method I recently discovered to determine which value category an &lt;strong&gt;expression&lt;/strong&gt; is. I&amp;rsquo;ll explain why it works later.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s take a look at value categories in C++.&lt;/p&gt;
&lt;p&gt;One of the most important things you should notice before you start is that value categories are not a property about &lt;strong&gt;values&lt;/strong&gt;, but rather a property about &lt;strong&gt;expressions&lt;/strong&gt;. Actually it depends on how you understand &lt;strong&gt;value&lt;/strong&gt;, I looked through the C++ standard but &lt;strong&gt;it seems they don&amp;rsquo;t define what the term value means&lt;/strong&gt;. However, we all know what an expression is. (in case you don&amp;rsquo;t know, you can refer to cppreference)&lt;/p&gt;
&lt;p&gt;Anyway, there are 3 kinds of value categories. They are called LVALUE, PRVALUE, XVALUE.&lt;/p&gt;
&lt;p&gt;We know you can write x=3 but not 3=x. Since 3 and x are both expressions, there must be some qualitative difference between them. Since x can be placed to the left of the equals sign(assignment sign), so we call it an lvalue. 3 is called an rvalue accordingly.&lt;/p&gt;
&lt;p&gt;OK. Now I know the difference between LVALUE and RVALUE, but what is PRVALUE and XVALUE?&lt;/p&gt;
&lt;p&gt;Well, there are two dimensions to the form of expressions. 1. Does the expression have an identity? 2. Can the expression be moved?&lt;/p&gt;
&lt;p&gt;The one that has identity and can be moved is called XVALUE (eXpiring value).
The one that has identity but cannot be moved is called LVALUE.
The one that has no identity but can be moved is called PRVALUE.&lt;/p&gt;
&lt;p&gt;For example, these are examples for XVALUE:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;move&lt;/span&gt;(&lt;span style=&#34;color:#c1abea&#34;&gt;x&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#c1abea&#34;&gt;m&lt;/span&gt;, &lt;span style=&#34;color:#c1abea&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;member&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;expression&lt;/span&gt;, &lt;span style=&#34;color:#c1abea&#34;&gt;where&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;an&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;rvalue&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;non&lt;/span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;member&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;non&lt;/span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;reference&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;type&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;temporary-materialization&#34;&gt;Temporary materialization&lt;/h2&gt;
&lt;p&gt;The most useful example to help you understand XVALUE is: Temporary materialization.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#76a9f9&#34;&gt;S&lt;/span&gt; { &lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;m&lt;/span&gt;; }; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;S&lt;/span&gt;().&lt;span style=&#34;color:#c1abea&#34;&gt;m&lt;/span&gt;; &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// member access expects glvalue as of C++17;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;               &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// S() prvalue is converted to xvalue
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;As the cppreference goes: A prvalue of any complete type T can be converted to an xvalue of the same type T. This conversion initializes a temporary object of type T from the prvalue by evaluating the prvalue with the temporary object as its result object, and produces an xvalue denoting the temporary object. If T is a class or array of class type, it must have an accessible and non-deleted destructor.&lt;/p&gt;
&lt;p&gt;So the key difference between XVALUE and PRVALUE is that can we &lt;strong&gt;reuse&lt;/strong&gt; the resources of it. We cannot reuse the number 3 or 3.7 but &lt;strong&gt;we can reuse the memory allocated for a temporary string object&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;decltype-and-value-categories&#34;&gt;Decltype and value categories&lt;/h2&gt;
&lt;p&gt;Decltype is a good tool to help us determine the category of an expression.&lt;/p&gt;
&lt;p&gt;Because its behavior is to generate an rvalue reference for XVALUE, an unreferenced type for PRVALUE, and an lvalue reference for LVALUE.&lt;/p&gt;
&lt;p&gt;Well, someone may argue that if &lt;code&gt;int x=3;&lt;/code&gt; then &lt;code&gt;x is an LVALUE but decltype(x) is int itself rather than int&amp;amp;.&lt;/code&gt; That&amp;rsquo;s because the special case for id-expr in the behavior of decltype.&lt;/p&gt;
&lt;p&gt;If the argument is an unparenthesized id-expression or an unparenthesized class member access expression, then decltype yields the type of the entity named by this expression. If there is no such entity, or if the argument names a set of overloaded functions, the program is ill-formed.&lt;/p&gt;
&lt;p&gt;So the right way is &lt;code&gt;int x=3; decltype((x)) xref=x;&lt;/code&gt;. Here the type of &lt;code&gt;xref&lt;/code&gt; is &lt;code&gt;int&amp;amp;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;stdmove&#34;&gt;std::move&lt;/h2&gt;
&lt;p&gt;The famous function &lt;code&gt;move&lt;/code&gt; actually does nothing to do with &amp;ldquo;move something&amp;rdquo;. Actually, it just change the value category of the parameter from LVALUE to XVALUE. In the most cases, you should call move using an LVALUE.&lt;/p&gt;
&lt;p&gt;std::move is used to &lt;strong&gt;indicate&lt;/strong&gt; that an object t may be &amp;ldquo;moved from&amp;rdquo;, i.e. allowing the efficient transfer of resources from t to another object.&lt;/p&gt;
&lt;p&gt;In particular, std::move produces an xvalue expression that identifies its argument t. It is exactly equivalent to a static_cast to an rvalue reference type.&lt;/p&gt;
- https://blog.oyyko.com/posts/value_categories_in_cpp/ - </description>
        </item>
    
    
    
        <item>
        <title>Revisit_OS</title>
        <link>https://blog.oyyko.com/posts/revisit_os/</link>
        <pubDate>Sat, 20 Aug 2022 16:05:28 +0800</pubDate>
        
        <guid>https://blog.oyyko.com/posts/revisit_os/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/revisit_os/ -&lt;p&gt;For some reason, I&amp;rsquo;ve been reviewing OS related stuff lately.&lt;/p&gt;
&lt;h2 id=&#34;hardlink-and-softlink&#34;&gt;hardlink and softlink&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../hardlink.jpg&#34; alt=&#34;hardlink and softlink&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ln&lt;/code&gt; creates hark links.
&lt;code&gt;ln -s&lt;/code&gt; creates soft (a.k.a symbolic) links.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ln -l&lt;/code&gt; show the number of hardlinks points to the same inode.&lt;/p&gt;
&lt;p&gt;hardlink points to the inode.
softlink points to the path.&lt;/p&gt;
&lt;p&gt;pros and cons:
hardlink must be on the same partition, can only link to files.
softlink can link to a file or directory, no partition limitation.&lt;/p&gt;
&lt;p&gt;Hard links are only valid within the same File System. Symbolic links can span file systems as they are simply the name of another file.&lt;/p&gt;
&lt;p&gt;Underneath the file system, files are represented by inodes.&lt;/p&gt;
&lt;p&gt;A file in the file system is basically a link to an inode.
A hard link, then, just creates another file with a link to the same underlying inode.&lt;/p&gt;
&lt;p&gt;When you delete a file, it removes one link to the underlying inode. The inode is only deleted (or deletable/over-writable) when all links to the inode have been deleted.&lt;/p&gt;
&lt;p&gt;A symbolic link is a link to another name in the file system.&lt;/p&gt;
&lt;p&gt;Once a hard link has been made the link is to the inode. Deleting, renaming, or moving the original file will not affect the hard link as it links to the underlying inode. Any changes to the data on the inode is reflected in all files that refer to that inode.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#ef8383&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#c7bf54&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#c7bf54&#34;&gt;)&lt;/span&gt; ✗ touch &lt;span style=&#34;color:#d19a66&#34;&gt;111&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;222&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#ef8383&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#c7bf54&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#c7bf54&#34;&gt;)&lt;/span&gt; ✗ &lt;span style=&#34;color:#ef8383&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;111&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#d19a66&#34;&gt;111&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#ef8383&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#c7bf54&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#c7bf54&#34;&gt;)&lt;/span&gt; ✗ &lt;span style=&#34;color:#ef8383&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;222&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#d19a66&#34;&gt;222&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#ef8383&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#c7bf54&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#c7bf54&#34;&gt;)&lt;/span&gt; ✗ ln &lt;span style=&#34;color:#d19a66&#34;&gt;111&lt;/span&gt; l111   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#ef8383&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#c7bf54&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#c7bf54&#34;&gt;)&lt;/span&gt; ✗ ln -s &lt;span style=&#34;color:#d19a66&#34;&gt;222&lt;/span&gt; s222
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#ef8383&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#c7bf54&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#c7bf54&#34;&gt;)&lt;/span&gt; ✗ ls            
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d19a66&#34;&gt;111&lt;/span&gt;  &lt;span style=&#34;color:#d19a66&#34;&gt;222&lt;/span&gt;  l111  s222
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#ef8383&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#c7bf54&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#c7bf54&#34;&gt;)&lt;/span&gt; ✗ ls -l
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;总计 &lt;span style=&#34;color:#d19a66&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#d19a66&#34;&gt;2&lt;/span&gt; zhangjia zhangjia &lt;span style=&#34;color:#d19a66&#34;&gt;4&lt;/span&gt;  8月20日 16:46 &lt;span style=&#34;color:#d19a66&#34;&gt;111&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt; zhangjia zhangjia &lt;span style=&#34;color:#d19a66&#34;&gt;4&lt;/span&gt;  8月20日 16:46 &lt;span style=&#34;color:#d19a66&#34;&gt;222&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#d19a66&#34;&gt;2&lt;/span&gt; zhangjia zhangjia &lt;span style=&#34;color:#d19a66&#34;&gt;4&lt;/span&gt;  8月20日 16:46 l111
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt; zhangjia zhangjia &lt;span style=&#34;color:#d19a66&#34;&gt;3&lt;/span&gt;  8月20日 16:46 s222 -&amp;gt; &lt;span style=&#34;color:#d19a66&#34;&gt;222&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Now, why the soft link&amp;rsquo;s file mode is lrwxrwxrwx.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;l&lt;/code&gt; means soft link. The rest is same to a normal file mode.&lt;/p&gt;
- https://blog.oyyko.com/posts/revisit_os/ - </description>
        </item>
    
    
    
        <item>
        <title>Using Cpp17 or higher version of Cpp on Vscode extension Clangd</title>
        <link>https://blog.oyyko.com/posts/use-cpp17-on-vscode-clangd/</link>
        <pubDate>Sun, 07 Aug 2022 21:49:29 +0800</pubDate>
        
        <guid>https://blog.oyyko.com/posts/use-cpp17-on-vscode-clangd/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/use-cpp17-on-vscode-clangd/ -&lt;p&gt;Recently I&amp;rsquo;ve switched my code completion tool in VScode from Microsoft&amp;rsquo;s official plugin to clangd. On the one hand, clangd can provide a better user experience, on the other hand, I also use this plugin in my company (Bytedance).&lt;/p&gt;
&lt;p&gt;I joked to myself: Two of the most interesting things I learned when I interned at the company were that indentation changed from four spaces to two, and braces changed from wrap to no wrap.&lt;/p&gt;
&lt;p&gt;Now, there is a problem. I installed clangd, switched over and everything worked fine. But when I use string_view, clangd told me it didn&amp;rsquo;t recognize this thing. I quickly realized that this is due to the fact that the default Cpp version of clangd is still 14. So changing its default version became something I had to do.&lt;/p&gt;
&lt;p&gt;I googled but didn&amp;rsquo;t find any useful information.&lt;/p&gt;
&lt;p&gt;I try to use compile_commands.json file. But on the one hand, it needs to be configured separately for each project, while the effect I expect is to use Cpp17 for any file that is opened at random. On the other hand, it turns out that it does not work. (maybe I didn&amp;rsquo;t configure it properly)&lt;/p&gt;
&lt;p&gt;So, here is the final solution.&lt;/p&gt;
&lt;p&gt;Open (create if not already there) &lt;code&gt;~/.config/clangd/config.yaml&lt;/code&gt;
and write the following information&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;CompileFlags&lt;/span&gt;: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e06c75&#34;&gt;Add&lt;/span&gt;: [-&lt;span style=&#34;color:#98c379&#34;&gt;std=c++20]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Cool. Now let&amp;rsquo;s have fun with Cpp20.&lt;/p&gt;
- https://blog.oyyko.com/posts/use-cpp17-on-vscode-clangd/ - </description>
        </item>
    
    
    
        <item>
        <title>About</title>
        <link>https://blog.oyyko.com/about/</link>
        <pubDate>Sun, 24 Jul 2022 16:00:55 +0800</pubDate>
        
        <guid>https://blog.oyyko.com/about/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/about/ -&lt;p&gt;Hi. Oyyko here. You can find out more about me &lt;a href=&#34;https://oyyko.com/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of my favorite Latin aphorisms is: &amp;ldquo;Memento mori&amp;rdquo;. It means remember you are mortal.&lt;/p&gt;
&lt;p&gt;The name Oyyko was randomly typed by me. Since then, I have been using it as my nickname.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;My OS: Windows7 -&amp;gt; Windows10 -&amp;gt; Manjaro -&amp;gt; Ubuntu -&amp;gt; mac OS -&amp;gt; Archlinux -&amp;gt; Manjaro
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;My Laptop: Some HP -&amp;gt; Legion Y7000P -&amp;gt; Macbook Pro 13 -&amp;gt; ThinkPad X1 Carbon (9th) -&amp;gt; mechrevo Code 01
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Programming language: C, C++, Rust, Python, Lisp, Haskell, Ruby, Java, Typescript
&lt;/code&gt;&lt;/pre&gt;- https://blog.oyyko.com/about/ - </description>
        </item>
    
    
    
        <item>
        <title>First Post</title>
        <link>https://blog.oyyko.com/posts/first-post/</link>
        <pubDate>Sun, 24 Jul 2022 00:37:35 +0800</pubDate>
        
        <guid>https://blog.oyyko.com/posts/first-post/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/first-post/ -&lt;h2 id=&#34;新博客&#34;&gt;新博客&lt;/h2&gt;
&lt;p&gt;决定把博客切换到hugo。也算是人生路上一个新的开始。&lt;/p&gt;
- https://blog.oyyko.com/posts/first-post/ - </description>
        </item>
    
    
    
        <item>
        <title>C&#43;&#43; Note 4</title>
        <link>https://blog.oyyko.com/posts/cpp4/</link>
        <pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate>
        
        <guid>https://blog.oyyko.com/posts/cpp4/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/cpp4/ -&lt;p&gt;C++ 笔记4&lt;/p&gt;
&lt;h2 id=&#34;引用与重载&#34;&gt;引用与重载&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#c678dd&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;std&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ef8383&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;x&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;DOUBLE&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;endl&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ef8383&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;x&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;INT&amp;amp;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;endl&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;main&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#d19a66&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这段代码会输出DOUBLE 原因在于 2是右值 不能用于初始化一个&lt;code&gt;int&amp;amp;&lt;/code&gt; 则只能选择第一个版本的函数重载&lt;/p&gt;
&lt;h2 id=&#34;重载的其他规则&#34;&gt;重载的其他规则&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;T&lt;/code&gt;和&lt;code&gt;const T&lt;/code&gt;同样
&lt;code&gt;T*&lt;/code&gt;和&lt;code&gt;const T*&lt;/code&gt;不一样 但是和&lt;code&gt;T* const &lt;/code&gt;一样
&lt;code&gt;T&amp;amp;&lt;/code&gt;和&lt;code&gt;const T&amp;amp;&lt;/code&gt;不一样&lt;/p&gt;
&lt;h2 id=&#34;模版实现数组求平均值&#34;&gt;模版实现数组求平均值&lt;/h2&gt;- https://blog.oyyko.com/posts/cpp4/ - </description>
        </item>
    
    
    
        <item>
        <title>BASH脚本</title>
        <link>https://blog.oyyko.com/posts/bash/</link>
        <pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://blog.oyyko.com/posts/bash/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/bash/ -&lt;p&gt;BASH 条件判断&lt;/p&gt;
&lt;h2 id=&#34;test-和-&#34;&gt;test 和 [&lt;/h2&gt;
&lt;p&gt;内置命令 test 根据表达式expr 求值的结果返回 0（真）或 1（假）。也可以使用方括号：test expr 和 [ expr ] 是等价的。 可以用 $? 检查返回值；可以使用 &amp;amp;&amp;amp; 和 || 操作返回值；也可以用本技巧后面介绍的各种条件结构测试返回值。&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ test 3 -gt 4 &amp;amp;&amp;amp; echo True || echo false&lt;/p&gt;
&lt;p&gt;false&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [ &amp;ldquo;abc&amp;rdquo; != &amp;ldquo;def&amp;rdquo; ];echo $?&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ test -d &amp;ldquo;$HOME&amp;rdquo; ;echo $?&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;在清单 1 的第一个示例中，-gt 操作符对两个字符值之间执行算术比较。在第二个示例中，用 [ ] 的形式比较两个字符串不相等。在最后一个示例中，测试 HOME 变量的值，用单目操作符 -d 检查它是不是目录。&lt;/p&gt;
&lt;p&gt;可以用 -eq、 -ne、-lt、 -le、 -gt 或 -ge 比较算术值，它们分别表示等于、不等于、小于、小于等于、大于、大于等于。&lt;/p&gt;
&lt;p&gt;可以分别用操作符 =、 !=、&amp;lt; 和 &amp;gt; 比较字符串是否相等、不相等或者第一个字符串的排序在第二个字符串的前面或后面。单目操作符 -z 测试 null 字符串，如果字符串非空 -n 返回 True（或者根本没有操作符）。&lt;/p&gt;
&lt;p&gt;说明：shell 也用 &amp;lt; 和 &amp;gt; 操作符进行重定向，所以必须用 &amp;lt; 或 &amp;gt; 加以转义。清单 2 显示了字符串测试的更多示例。检查它们是否如您预期的一样。&lt;/p&gt;
&lt;h2 id=&#34;一些常见的文件测试-操作符-特征&#34;&gt;一些常见的文件测试 操作符 特征&lt;/h2&gt;
&lt;p&gt;-d 目录&lt;/p&gt;
&lt;p&gt;-e 存在（也可以用 -a）&lt;/p&gt;
&lt;p&gt;-f 普通文件&lt;/p&gt;
&lt;p&gt;-h 符号连接（也可以用 -L）&lt;/p&gt;
&lt;p&gt;-p 命名管道&lt;/p&gt;
&lt;p&gt;-r 可读&lt;/p&gt;
&lt;p&gt;-s 非空&lt;/p&gt;
&lt;p&gt;-S 套接字&lt;/p&gt;
&lt;p&gt;-w 可写&lt;/p&gt;
&lt;p&gt;-N 从上次读取之后已经做过修改&lt;/p&gt;
&lt;h2 id=&#34;除了上面的单目测试还可以使用表-2-所示的双目操作符比较两个文件&#34;&gt;除了上面的单目测试，还可以使用表 2 所示的双目操作符比较两个文件：&lt;/h2&gt;
&lt;p&gt;表 2. 测试一对文件 操作符 为 True 的情况&lt;/p&gt;
&lt;p&gt;-nt 测试 file1 是否比 file2 更新。修改日期将用于这次和下次比较。&lt;/p&gt;
&lt;p&gt;-ot 测试 file1 是否比 file2 旧。&lt;/p&gt;
&lt;p&gt;-ef 测试 file1 是不是 file2 的硬链接。&lt;/p&gt;
&lt;h2 id=&#34;清单-5-分配和测试算术表达式&#34;&gt;清单 5. 分配和测试算术表达式&lt;/h2&gt;
&lt;p&gt;[ian@pinguino ~]$ let x=2 y=2**3 z=y*3;echo $? $x $y $z&lt;/p&gt;
&lt;p&gt;0 2 8 24&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ (( w=(y/x) + ( (~ ++x) &amp;amp; 0x0f ) )); echo $? $x $y $w&lt;/p&gt;
&lt;p&gt;0 3 8 16&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ (( w=(y/x) + ( (~ ++x) &amp;amp; 0x0f ) )); echo $? $x $y $w&lt;/p&gt;
&lt;p&gt;0 4 8 13&lt;/p&gt;
&lt;p&gt;清单 6. 使用 [[ 复合命令&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [[ ( -d &amp;ldquo;$HOME&amp;rdquo; ) &amp;amp;&amp;amp; ( -w &amp;ldquo;$HOME&amp;rdquo; ) ]] &amp;amp;&amp;amp;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;echo &amp;ldquo;home is a writable directory&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;home is a writable directory&lt;/p&gt;
&lt;p&gt;在使用 = 或 != 操作符时，复合命令 [[ 还能在字符串上进行模式匹配。匹配的方式就像清单 7 所示的通配符匹配。&lt;/p&gt;
&lt;p&gt;清单 7. 用 [[ 进行通配符测试&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [[ &amp;ldquo;abc def .d,x&amp;ndash;&amp;rdquo; == a[abc]&lt;em&gt;\ ?d&lt;/em&gt; ]]; echo $?&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [[ &amp;ldquo;abc def c&amp;rdquo; == a[abc]&lt;em&gt;\ ?d&lt;/em&gt; ]]; echo $?&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [[ &amp;ldquo;abc def d,x&amp;rdquo; == a[abc]&lt;em&gt;\ ?d&lt;/em&gt; ]]; echo $?&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;甚至还可以在 [[ 复合命令内执行算术测试，但是千万要小心。除非在 (( 复合命令内，否则 &amp;lt; 和 &amp;gt; 操作符会把操作数当成字符串比较并在当前排序序列中测试它们的顺序。清单 8 用一些示例演示了这一点。&lt;/p&gt;
&lt;p&gt;清单 8. 用 [[ 包含算术测试&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [[ &amp;ldquo;abc def d,x&amp;rdquo; == a[abc]&lt;em&gt;\ ?d&lt;/em&gt; || (( 3 &amp;gt; 2 )) ]]; echo $?&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [[ &amp;ldquo;abc def d,x&amp;rdquo; == a[abc]&lt;em&gt;\ ?d&lt;/em&gt; || 3 -gt 2 ]]; echo $?&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [[ &amp;ldquo;abc def d,x&amp;rdquo; == a[abc]&lt;em&gt;\ ?d&lt;/em&gt; || 3 &amp;gt; 2 ]]; echo $?&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [[ &amp;ldquo;abc def d,x&amp;rdquo; == a[abc]&lt;em&gt;\ ?d&lt;/em&gt; || a &amp;gt; 2 ]]; echo $?&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [[ &amp;ldquo;abc def d,x&amp;rdquo; == a[abc]&lt;em&gt;\ ?d&lt;/em&gt; || a -gt 2 ]]; echo $?&lt;/p&gt;
&lt;p&gt;-bash: a: unbound variable&lt;/p&gt;
&lt;p&gt;条件测试&lt;/p&gt;
&lt;p&gt;虽然使用以上的测试和 &amp;amp;&amp;amp;、 || 控制操作符能实现许多编程，但 bash 还包含了更熟悉的 “if, then, else” 和 case 结构。学习完这些之后，将学习循环结构，这样您的工具箱将真正得到扩展。&lt;/p&gt;
&lt;p&gt;If、then、else 语句&lt;/p&gt;
&lt;p&gt;bash 的 if 命令是个复合命令，它测试一个测试或命令（$?）的返回值，并根据返回值为 True（0）或 False（不为 0）进行分支。虽然上面的测试只返回 0 或 1 值，但命令可能返回其他值。请参阅 LPI exam 102 prep: Shells, scripting, programming, and compiling 教程学习这方面的更多内容。&lt;/p&gt;
&lt;p&gt;Bash 中的 if 命令有一个 then 子句，子句中包含测试或命令返回 0 时要执行的命令列表，可以有一个或多个可选的 elif 子句，每个子句可执行附加的测试和一个 then 子句，子句中又带有相关的命令列表，最后是可选的 else 子句及命令列表，在前面的测试或 elif 子句中的所有测试都不为真的时候执行，最后使用 fi 标记表示该结构结束。&lt;/p&gt;
&lt;p&gt;使用迄今为止学到的东西，现在能够构建简单的计算器来计算算术表达式，如清单 9 所示：&lt;/p&gt;
&lt;p&gt;清单 9. 用 if、then、else 计算表达式&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ function mycalc ()&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;local x&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;if [ $# -lt 1 ]; then&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;echo &amp;ldquo;This function evaluates arithmetic for you if you give it some&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;elif (( $* )); then&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;let x=&amp;quot;$*&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;echo &amp;ldquo;$* = $x&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;else&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;echo &amp;ldquo;$* = 0 or is not an arithmetic expression&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;fi&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 3 + 4&lt;/p&gt;
&lt;p&gt;3 + 4 = 7&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 3 + 4**3&lt;/p&gt;
&lt;p&gt;3 + 4**3 = 67&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 3 + (4**3 /2)&lt;/p&gt;
&lt;p&gt;-bash: syntax error near unexpected token `(&#39;&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 3 + &amp;ldquo;(4**3 /2)&amp;rdquo;&lt;/p&gt;
&lt;p&gt;3 + (4**3 /2) = 35&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc xyz&lt;/p&gt;
&lt;p&gt;xyz = 0 or is not an arithmetic expression&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc xyz + 3 + &amp;ldquo;(4**3 /2)&amp;rdquo; + abc&lt;/p&gt;
&lt;p&gt;xyz + 3 + (4**3 /2) + abc = 35&lt;/p&gt;
&lt;p&gt;这个计算器利用 local 语句将 x 声明为局部变量，只能在 mycalc 函数的范围内使用。let 函数具有几个可用的选项，可以执行与它密切关联的 declare 函数。请参考 bash 手册或使用 help let 获得更多信息。&lt;/p&gt;
&lt;p&gt;如清单 9 所示，需要确保在表达式使用 shell 元字符 —— 例如(、)、*、&amp;gt; 和 &amp;lt; 时 —— 正确地对表达式转义。无论如何，现在有了一个非常方便的小计算器，可以像 shell 那样进行算术计算。&lt;/p&gt;
&lt;p&gt;在清单 9 中可能注意到 else 子句和最后的两个示例。可以看到，把 xyz 传递给 mycalc 并没有错误，但计算结果为 0。这个函数还不够灵巧，不能区分最后使用的示例中的字符值，所以不能警告用户。可以使用字符串模式匹配测试（例如&lt;/p&gt;
&lt;p&gt;[[ ! (&amp;quot;$*&amp;quot; == &lt;em&gt;[a-zA-Z]&lt;/em&gt; ]]&lt;/p&gt;
&lt;p&gt;， 或使用适合自己范围的形式）消除包含字母表字符的表达式，但是这会妨碍在输入中使用 16 进制标记，因为使用 16 进制标记时可能要用 0x0f 表示 15。实际上，shell 允许的基数最高为 64（使用 base#value 标记），所以可以在输入中加入 _ 和 @ 合法地使用任何字母表字符。8 进制和 16 进制使用常用的标记方式，开头为 0 表示八进制，开头为 0x 或 0X 表示 16 进制。清单 10 显示了一些示例。&lt;/p&gt;
&lt;p&gt;清单 10. 用不同的基数进行计算&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 015&lt;/p&gt;
&lt;p&gt;015 = 13&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 0xff&lt;/p&gt;
&lt;p&gt;0xff = 255&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 29#37&lt;/p&gt;
&lt;p&gt;29#37 = 94&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 64#1az&lt;/p&gt;
&lt;p&gt;64#1az = 4771&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 64#1azA&lt;/p&gt;
&lt;p&gt;64#1azA = 305380&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 64#1azA_@&lt;/p&gt;
&lt;p&gt;64#1azA_@ = 1250840574&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 64#1az*64**3 + 64#A_@&lt;/p&gt;
&lt;p&gt;64#1az*64**3 + 64#A_@ = 1250840574&lt;/p&gt;
&lt;p&gt;对输入进行的额外处理超出了本技巧的范围，所以请小心使用这个计算器。&lt;/p&gt;
&lt;p&gt;elif 语句非常方便。它允许简化缩进，从而有助于脚本编写。在清单 11 中可能会对 type 命令在 mycalc 函数中的输出感到惊讶。&lt;/p&gt;
&lt;p&gt;清单 11. Type mycalc&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ type mycalc&lt;/p&gt;
&lt;p&gt;mycalc is a function&lt;/p&gt;
&lt;p&gt;mycalc ()&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;local x;&lt;/p&gt;
&lt;p&gt;if [ $# -lt 1 ]; then&lt;/p&gt;
&lt;p&gt;echo &amp;ldquo;This function evaluates arithmetic for you if you give it some&amp;rdquo;;&lt;/p&gt;
&lt;p&gt;else&lt;/p&gt;
&lt;p&gt;if (( $* )); then&lt;/p&gt;
&lt;p&gt;let x=&amp;quot;$*&amp;quot;;&lt;/p&gt;
&lt;p&gt;echo &amp;ldquo;$* = $x&amp;rdquo;;&lt;/p&gt;
&lt;p&gt;else&lt;/p&gt;
&lt;p&gt;echo &amp;ldquo;$* = 0 or is not an arithmetic expression&amp;rdquo;;&lt;/p&gt;
&lt;p&gt;fi;&lt;/p&gt;
&lt;p&gt;fi&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;当 然，也可以只用 $(( 表达式 )) 和 echo 命令进行 shell 算术运算，如清单 12 所示。这样就不必学习关于函数或测试的任何内容，但是请注意 shell 不会解释元字符，例如 *，因此元字符不能在 (( 表达式 )) 或 [[ 表达式 ]] 中那样正常发挥作用。&lt;/p&gt;
&lt;p&gt;清单 12. 在 shell 中用 echo 和 $(( )) 直接进行计算&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ echo $((3 + (4**3 /2)))&lt;/p&gt;- https://blog.oyyko.com/posts/bash/ - </description>
        </item>
    
    
  </channel>
</rss> 