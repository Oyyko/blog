<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oyyko&#39;s Blog</title>
    <link>https://blog.oyyko.com/</link>
    <description>Recent content on Oyyko&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 23 Aug 2022 15:20:51 +0800</lastBuildDate>
    
        <atom:link href="https://blog.oyyko.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Value_categories_in_Cpp</title>
        <link>https://blog.oyyko.com/posts/value_categories_in_cpp/</link>
        <pubDate>Tue, 23 Aug 2022 15:20:51 +0800</pubDate>
        
        <guid>https://blog.oyyko.com/posts/value_categories_in_cpp/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/value_categories_in_cpp/ -&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;#define IS_XVALUE(expr) \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;(is_rvalue_reference&amp;lt;decltype((expr))&amp;gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;#define IS_PRVALUE(expr) \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;(!is_reference&amp;lt;decltype((expr))&amp;gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;#define IS_LVALUE(expr) \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;(is_lvalue_reference&amp;lt;decltype((expr))&amp;gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This is a method I recently discovered to determine which value category an &lt;strong&gt;expression&lt;/strong&gt; is. I&amp;rsquo;ll explain why it works later.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s take a look at value categories in C++.&lt;/p&gt;
&lt;p&gt;One of the most important things you should notice before you start is that value categories are not a property about &lt;strong&gt;values&lt;/strong&gt;, but rather a property about &lt;strong&gt;expressions&lt;/strong&gt;. Actually it depends on how you understand &lt;strong&gt;value&lt;/strong&gt;, I looked through the C++ standard but &lt;strong&gt;it seems they don&amp;rsquo;t define what the term value means&lt;/strong&gt;. However, we all know what an expression is. (in case you don&amp;rsquo;t know, you can refer to cppreference)&lt;/p&gt;
&lt;p&gt;Anyway, there are 3 kinds of value categories. They are called LVALUE, PRVALUE, XVALUE.&lt;/p&gt;
&lt;p&gt;We know you can write x=3 but not 3=x. Since 3 and x are both expressions, there must be some qualitative difference between them. Since x can be placed to the left of the equals sign(assignment sign), so we call it an lvalue. 3 is called an rvalue accordingly.&lt;/p&gt;
&lt;p&gt;OK. Now I know the difference between LVALUE and RVALUE, but what is PRVALUE and XVALUE?&lt;/p&gt;
&lt;p&gt;Well, there are two dimensions to the form of expressions. 1. Does the expression have an identity? 2. Can the expression be moved?&lt;/p&gt;
&lt;p&gt;The one that has identity and can be moved is called XVALUE (eXpiring value).
The one that has identity but cannot be moved is called LVALUE.
The one that has no identity but can be moved is called PRVALUE.&lt;/p&gt;
&lt;p&gt;For example, these are examples for XVALUE:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;std&lt;/span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;move&lt;/span&gt;(&lt;span style=&#34;color:#c1abea&#34;&gt;x&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;a&lt;/span&gt;.&lt;span style=&#34;color:#c1abea&#34;&gt;m&lt;/span&gt;, &lt;span style=&#34;color:#c1abea&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;member&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;expression&lt;/span&gt;, &lt;span style=&#34;color:#c1abea&#34;&gt;where&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;an&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;rvalue&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;non&lt;/span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;member&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;of&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;non&lt;/span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;reference&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;type&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;temporary-materialization&#34;&gt;Temporary materialization&lt;/h2&gt;
&lt;p&gt;The most useful example to help you understand XVALUE is: Temporary materialization.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#76a9f9&#34;&gt;S&lt;/span&gt; { &lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;m&lt;/span&gt;; }; 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;S&lt;/span&gt;().&lt;span style=&#34;color:#c1abea&#34;&gt;m&lt;/span&gt;; &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// member access expects glvalue as of C++17;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;               &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// S() prvalue is converted to xvalue
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;As the cppreference goes: A prvalue of any complete type T can be converted to an xvalue of the same type T. This conversion initializes a temporary object of type T from the prvalue by evaluating the prvalue with the temporary object as its result object, and produces an xvalue denoting the temporary object. If T is a class or array of class type, it must have an accessible and non-deleted destructor.&lt;/p&gt;
&lt;p&gt;So the key difference between XVALUE and PRVALUE is that can we &lt;strong&gt;reuse&lt;/strong&gt; the resources of it. We cannot reuse the number 3 or 3.7 but &lt;strong&gt;we can reuse the memory allocated for a temporary string object&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;decltype-and-value-categories&#34;&gt;Decltype and value categories&lt;/h2&gt;
&lt;p&gt;Decltype is a good tool to help us determine the category of an expression.&lt;/p&gt;
&lt;p&gt;Because its behavior is to generate an rvalue reference for XVALUE, an unreferenced type for PRVALUE, and an lvalue reference for LVALUE.&lt;/p&gt;
&lt;p&gt;Well, someone may argue that if &lt;code&gt;int x=3;&lt;/code&gt; then &lt;code&gt;x is an LVALUE but decltype(x) is int itself rather than int&amp;amp;.&lt;/code&gt; That&amp;rsquo;s because the special case for id-expr in the behavior of decltype.&lt;/p&gt;
&lt;p&gt;If the argument is an unparenthesized id-expression or an unparenthesized class member access expression, then decltype yields the type of the entity named by this expression. If there is no such entity, or if the argument names a set of overloaded functions, the program is ill-formed.&lt;/p&gt;
&lt;p&gt;So the right way is &lt;code&gt;int x=3; decltype((x)) xref=x;&lt;/code&gt;. Here the type of &lt;code&gt;xref&lt;/code&gt; is &lt;code&gt;int&amp;amp;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;stdmove&#34;&gt;std::move&lt;/h2&gt;
&lt;p&gt;The famous function &lt;code&gt;move&lt;/code&gt; actually does nothing to do with &amp;ldquo;move something&amp;rdquo;. Actually, it just change the value category of the parameter from LVALUE to XVALUE. In the most cases, you should call move using an LVALUE.&lt;/p&gt;
&lt;p&gt;std::move is used to &lt;strong&gt;indicate&lt;/strong&gt; that an object t may be &amp;ldquo;moved from&amp;rdquo;, i.e. allowing the efficient transfer of resources from t to another object.&lt;/p&gt;
&lt;p&gt;In particular, std::move produces an xvalue expression that identifies its argument t. It is exactly equivalent to a static_cast to an rvalue reference type.&lt;/p&gt;
- https://blog.oyyko.com/posts/value_categories_in_cpp/ - </description>
        </item>
    
    
    
        <item>
        <title>Revisit_OS</title>
        <link>https://blog.oyyko.com/posts/revisit_os/</link>
        <pubDate>Sat, 20 Aug 2022 16:05:28 +0800</pubDate>
        
        <guid>https://blog.oyyko.com/posts/revisit_os/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/revisit_os/ -&lt;p&gt;For some reason, I&amp;rsquo;ve been reviewing OS related stuff lately.&lt;/p&gt;
&lt;h2 id=&#34;hardlink-and-softlink&#34;&gt;hardlink and softlink&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../hardlink.jpg&#34; alt=&#34;hardlink and softlink&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ln&lt;/code&gt; creates hark links.
&lt;code&gt;ln -s&lt;/code&gt; creates soft (a.k.a symbolic) links.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ln -l&lt;/code&gt; show the number of hardlinks points to the same inode.&lt;/p&gt;
&lt;p&gt;hardlink points to the inode.
softlink points to the path.&lt;/p&gt;
&lt;p&gt;pros and cons:
hardlink must be on the same partition, can only link to files.
softlink can link to a file or directory, no partition limitation.&lt;/p&gt;
&lt;p&gt;Hard links are only valid within the same File System. Symbolic links can span file systems as they are simply the name of another file.&lt;/p&gt;
&lt;p&gt;Underneath the file system, files are represented by inodes.&lt;/p&gt;
&lt;p&gt;A file in the file system is basically a link to an inode.
A hard link, then, just creates another file with a link to the same underlying inode.&lt;/p&gt;
&lt;p&gt;When you delete a file, it removes one link to the underlying inode. The inode is only deleted (or deletable/over-writable) when all links to the inode have been deleted.&lt;/p&gt;
&lt;p&gt;A symbolic link is a link to another name in the file system.&lt;/p&gt;
&lt;p&gt;Once a hard link has been made the link is to the inode. Deleting, renaming, or moving the original file will not affect the hard link as it links to the underlying inode. Any changes to the data on the inode is reflected in all files that refer to that inode.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#ef8383&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#c7bf54&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#c7bf54&#34;&gt;)&lt;/span&gt; ✗ touch &lt;span style=&#34;color:#d19a66&#34;&gt;111&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;222&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#ef8383&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#c7bf54&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#c7bf54&#34;&gt;)&lt;/span&gt; ✗ &lt;span style=&#34;color:#ef8383&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;111&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#d19a66&#34;&gt;111&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#ef8383&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#c7bf54&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#c7bf54&#34;&gt;)&lt;/span&gt; ✗ &lt;span style=&#34;color:#ef8383&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;222&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#d19a66&#34;&gt;222&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#ef8383&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#c7bf54&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#c7bf54&#34;&gt;)&lt;/span&gt; ✗ ln &lt;span style=&#34;color:#d19a66&#34;&gt;111&lt;/span&gt; l111   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#ef8383&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#c7bf54&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#c7bf54&#34;&gt;)&lt;/span&gt; ✗ ln -s &lt;span style=&#34;color:#d19a66&#34;&gt;222&lt;/span&gt; s222
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#ef8383&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#c7bf54&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#c7bf54&#34;&gt;)&lt;/span&gt; ✗ ls            
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#d19a66&#34;&gt;111&lt;/span&gt;  &lt;span style=&#34;color:#d19a66&#34;&gt;222&lt;/span&gt;  l111  s222
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#ef8383&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#c7bf54&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#c7bf54&#34;&gt;)&lt;/span&gt; ✗ ls -l
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;总计 &lt;span style=&#34;color:#d19a66&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#d19a66&#34;&gt;2&lt;/span&gt; zhangjia zhangjia &lt;span style=&#34;color:#d19a66&#34;&gt;4&lt;/span&gt;  8月20日 16:46 &lt;span style=&#34;color:#d19a66&#34;&gt;111&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt; zhangjia zhangjia &lt;span style=&#34;color:#d19a66&#34;&gt;4&lt;/span&gt;  8月20日 16:46 &lt;span style=&#34;color:#d19a66&#34;&gt;222&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#d19a66&#34;&gt;2&lt;/span&gt; zhangjia zhangjia &lt;span style=&#34;color:#d19a66&#34;&gt;4&lt;/span&gt;  8月20日 16:46 l111
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt; zhangjia zhangjia &lt;span style=&#34;color:#d19a66&#34;&gt;3&lt;/span&gt;  8月20日 16:46 s222 -&amp;gt; &lt;span style=&#34;color:#d19a66&#34;&gt;222&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Now, why the soft link&amp;rsquo;s file mode is lrwxrwxrwx.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;l&lt;/code&gt; means soft link. The rest is same to a normal file mode.&lt;/p&gt;
- https://blog.oyyko.com/posts/revisit_os/ - </description>
        </item>
    
    
    
        <item>
        <title>Using Cpp17 or higher version of Cpp on Vscode extension Clangd</title>
        <link>https://blog.oyyko.com/posts/use-cpp17-on-vscode-clangd/</link>
        <pubDate>Sun, 07 Aug 2022 21:49:29 +0800</pubDate>
        
        <guid>https://blog.oyyko.com/posts/use-cpp17-on-vscode-clangd/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/use-cpp17-on-vscode-clangd/ -&lt;p&gt;Recently I&amp;rsquo;ve switched my code completion tool in VScode from Microsoft&amp;rsquo;s official plugin to clangd. On the one hand, clangd can provide a better user experience, on the other hand, I also use this plugin in my company (Bytedance).&lt;/p&gt;
&lt;p&gt;I joked to myself: Two of the most interesting things I learned when I interned at the company were that indentation changed from four spaces to two, and braces changed from wrap to no wrap.&lt;/p&gt;
&lt;p&gt;Now, there is a problem. I installed clangd, switched over and everything worked fine. But when I use string_view, clangd told me it didn&amp;rsquo;t recognize this thing. I quickly realized that this is due to the fact that the default Cpp version of clangd is still 14. So changing its default version became something I had to do.&lt;/p&gt;
&lt;p&gt;I googled but didn&amp;rsquo;t find any useful information.&lt;/p&gt;
&lt;p&gt;I try to use compile_commands.json file. But on the one hand, it needs to be configured separately for each project, while the effect I expect is to use Cpp17 for any file that is opened at random. On the other hand, it turns out that it does not work. (maybe I didn&amp;rsquo;t configure it properly)&lt;/p&gt;
&lt;p&gt;So, here is the final solution.&lt;/p&gt;
&lt;p&gt;Open (create if not already there) &lt;code&gt;~/.config/clangd/config.yaml&lt;/code&gt;
and write the following information&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e06c75&#34;&gt;CompileFlags&lt;/span&gt;: 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#e06c75&#34;&gt;Add&lt;/span&gt;: [-&lt;span style=&#34;color:#98c379&#34;&gt;std=c++20]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Cool. Now let&amp;rsquo;s have fun with Cpp20.&lt;/p&gt;
- https://blog.oyyko.com/posts/use-cpp17-on-vscode-clangd/ - </description>
        </item>
    
    
    
        <item>
        <title>About</title>
        <link>https://blog.oyyko.com/about/</link>
        <pubDate>Sun, 24 Jul 2022 16:00:55 +0800</pubDate>
        
        <guid>https://blog.oyyko.com/about/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/about/ -&lt;p&gt;Hi. Oyyko here. You can find out more about me &lt;a href=&#34;https://oyyko.com/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One of my favorite Latin aphorisms is: &amp;ldquo;Memento mori&amp;rdquo;. It means remember you are mortal.&lt;/p&gt;
&lt;p&gt;The name Oyyko was randomly typed by me. Since then, I have been using it as my nickname.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;My OS: Windows7 -&amp;gt; Windows10 -&amp;gt; Manjaro -&amp;gt; Ubuntu -&amp;gt; mac OS -&amp;gt; Archlinux -&amp;gt; Manjaro
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;My Laptop: Some HP -&amp;gt; Legion Y7000P -&amp;gt; Macbook Pro 13 -&amp;gt; ThinkPad X1 Carbon (9th) -&amp;gt; mechrevo Code 01
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Programming language: C, C++, Rust, Python, Lisp, Haskell, Ruby, Java, Typescript
&lt;/code&gt;&lt;/pre&gt;- https://blog.oyyko.com/about/ - </description>
        </item>
    
    
    
        <item>
        <title>First Post</title>
        <link>https://blog.oyyko.com/posts/first-post/</link>
        <pubDate>Sun, 24 Jul 2022 00:37:35 +0800</pubDate>
        
        <guid>https://blog.oyyko.com/posts/first-post/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/first-post/ -&lt;h2 id=&#34;新博客&#34;&gt;新博客&lt;/h2&gt;
&lt;p&gt;决定把博客切换到hugo。也算是人生路上一个新的开始。&lt;/p&gt;
- https://blog.oyyko.com/posts/first-post/ - </description>
        </item>
    
    
    
        <item>
        <title>C&#43;&#43; Note 4</title>
        <link>https://blog.oyyko.com/posts/cpp4/</link>
        <pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate>
        
        <guid>https://blog.oyyko.com/posts/cpp4/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/cpp4/ -&lt;p&gt;C++ 笔记4&lt;/p&gt;
&lt;h2 id=&#34;引用与重载&#34;&gt;引用与重载&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#c678dd&#34;&gt;namespace&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;std&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ef8383&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;x&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;DOUBLE&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;endl&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ef8383&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;x&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;INT&amp;amp;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;endl&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;main&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;f&lt;/span&gt;(&lt;span style=&#34;color:#d19a66&#34;&gt;2&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这段代码会输出DOUBLE 原因在于 2是右值 不能用于初始化一个&lt;code&gt;int&amp;amp;&lt;/code&gt; 则只能选择第一个版本的函数重载&lt;/p&gt;
&lt;h2 id=&#34;重载的其他规则&#34;&gt;重载的其他规则&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;T&lt;/code&gt;和&lt;code&gt;const T&lt;/code&gt;同样
&lt;code&gt;T*&lt;/code&gt;和&lt;code&gt;const T*&lt;/code&gt;不一样 但是和&lt;code&gt;T* const &lt;/code&gt;一样
&lt;code&gt;T&amp;amp;&lt;/code&gt;和&lt;code&gt;const T&amp;amp;&lt;/code&gt;不一样&lt;/p&gt;
&lt;h2 id=&#34;模版实现数组求平均值&#34;&gt;模版实现数组求平均值&lt;/h2&gt;- https://blog.oyyko.com/posts/cpp4/ - </description>
        </item>
    
    
    
        <item>
        <title>BASH脚本</title>
        <link>https://blog.oyyko.com/posts/bash/</link>
        <pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://blog.oyyko.com/posts/bash/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/bash/ -&lt;p&gt;BASH 条件判断&lt;/p&gt;
&lt;h2 id=&#34;test-和-&#34;&gt;test 和 [&lt;/h2&gt;
&lt;p&gt;内置命令 test 根据表达式expr 求值的结果返回 0（真）或 1（假）。也可以使用方括号：test expr 和 [ expr ] 是等价的。 可以用 $? 检查返回值；可以使用 &amp;amp;&amp;amp; 和 || 操作返回值；也可以用本技巧后面介绍的各种条件结构测试返回值。&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ test 3 -gt 4 &amp;amp;&amp;amp; echo True || echo false&lt;/p&gt;
&lt;p&gt;false&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [ &amp;ldquo;abc&amp;rdquo; != &amp;ldquo;def&amp;rdquo; ];echo $?&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ test -d &amp;ldquo;$HOME&amp;rdquo; ;echo $?&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;在清单 1 的第一个示例中，-gt 操作符对两个字符值之间执行算术比较。在第二个示例中，用 [ ] 的形式比较两个字符串不相等。在最后一个示例中，测试 HOME 变量的值，用单目操作符 -d 检查它是不是目录。&lt;/p&gt;
&lt;p&gt;可以用 -eq、 -ne、-lt、 -le、 -gt 或 -ge 比较算术值，它们分别表示等于、不等于、小于、小于等于、大于、大于等于。&lt;/p&gt;
&lt;p&gt;可以分别用操作符 =、 !=、&amp;lt; 和 &amp;gt; 比较字符串是否相等、不相等或者第一个字符串的排序在第二个字符串的前面或后面。单目操作符 -z 测试 null 字符串，如果字符串非空 -n 返回 True（或者根本没有操作符）。&lt;/p&gt;
&lt;p&gt;说明：shell 也用 &amp;lt; 和 &amp;gt; 操作符进行重定向，所以必须用 &amp;lt; 或 &amp;gt; 加以转义。清单 2 显示了字符串测试的更多示例。检查它们是否如您预期的一样。&lt;/p&gt;
&lt;h2 id=&#34;一些常见的文件测试-操作符-特征&#34;&gt;一些常见的文件测试 操作符 特征&lt;/h2&gt;
&lt;p&gt;-d 目录&lt;/p&gt;
&lt;p&gt;-e 存在（也可以用 -a）&lt;/p&gt;
&lt;p&gt;-f 普通文件&lt;/p&gt;
&lt;p&gt;-h 符号连接（也可以用 -L）&lt;/p&gt;
&lt;p&gt;-p 命名管道&lt;/p&gt;
&lt;p&gt;-r 可读&lt;/p&gt;
&lt;p&gt;-s 非空&lt;/p&gt;
&lt;p&gt;-S 套接字&lt;/p&gt;
&lt;p&gt;-w 可写&lt;/p&gt;
&lt;p&gt;-N 从上次读取之后已经做过修改&lt;/p&gt;
&lt;h2 id=&#34;除了上面的单目测试还可以使用表-2-所示的双目操作符比较两个文件&#34;&gt;除了上面的单目测试，还可以使用表 2 所示的双目操作符比较两个文件：&lt;/h2&gt;
&lt;p&gt;表 2. 测试一对文件 操作符 为 True 的情况&lt;/p&gt;
&lt;p&gt;-nt 测试 file1 是否比 file2 更新。修改日期将用于这次和下次比较。&lt;/p&gt;
&lt;p&gt;-ot 测试 file1 是否比 file2 旧。&lt;/p&gt;
&lt;p&gt;-ef 测试 file1 是不是 file2 的硬链接。&lt;/p&gt;
&lt;h2 id=&#34;清单-5-分配和测试算术表达式&#34;&gt;清单 5. 分配和测试算术表达式&lt;/h2&gt;
&lt;p&gt;[ian@pinguino ~]$ let x=2 y=2**3 z=y*3;echo $? $x $y $z&lt;/p&gt;
&lt;p&gt;0 2 8 24&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ (( w=(y/x) + ( (~ ++x) &amp;amp; 0x0f ) )); echo $? $x $y $w&lt;/p&gt;
&lt;p&gt;0 3 8 16&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ (( w=(y/x) + ( (~ ++x) &amp;amp; 0x0f ) )); echo $? $x $y $w&lt;/p&gt;
&lt;p&gt;0 4 8 13&lt;/p&gt;
&lt;p&gt;清单 6. 使用 [[ 复合命令&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [[ ( -d &amp;ldquo;$HOME&amp;rdquo; ) &amp;amp;&amp;amp; ( -w &amp;ldquo;$HOME&amp;rdquo; ) ]] &amp;amp;&amp;amp;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;echo &amp;ldquo;home is a writable directory&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;home is a writable directory&lt;/p&gt;
&lt;p&gt;在使用 = 或 != 操作符时，复合命令 [[ 还能在字符串上进行模式匹配。匹配的方式就像清单 7 所示的通配符匹配。&lt;/p&gt;
&lt;p&gt;清单 7. 用 [[ 进行通配符测试&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [[ &amp;ldquo;abc def .d,x&amp;ndash;&amp;rdquo; == a[abc]&lt;em&gt;\ ?d&lt;/em&gt; ]]; echo $?&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [[ &amp;ldquo;abc def c&amp;rdquo; == a[abc]&lt;em&gt;\ ?d&lt;/em&gt; ]]; echo $?&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [[ &amp;ldquo;abc def d,x&amp;rdquo; == a[abc]&lt;em&gt;\ ?d&lt;/em&gt; ]]; echo $?&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;甚至还可以在 [[ 复合命令内执行算术测试，但是千万要小心。除非在 (( 复合命令内，否则 &amp;lt; 和 &amp;gt; 操作符会把操作数当成字符串比较并在当前排序序列中测试它们的顺序。清单 8 用一些示例演示了这一点。&lt;/p&gt;
&lt;p&gt;清单 8. 用 [[ 包含算术测试&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [[ &amp;ldquo;abc def d,x&amp;rdquo; == a[abc]&lt;em&gt;\ ?d&lt;/em&gt; || (( 3 &amp;gt; 2 )) ]]; echo $?&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [[ &amp;ldquo;abc def d,x&amp;rdquo; == a[abc]&lt;em&gt;\ ?d&lt;/em&gt; || 3 -gt 2 ]]; echo $?&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [[ &amp;ldquo;abc def d,x&amp;rdquo; == a[abc]&lt;em&gt;\ ?d&lt;/em&gt; || 3 &amp;gt; 2 ]]; echo $?&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [[ &amp;ldquo;abc def d,x&amp;rdquo; == a[abc]&lt;em&gt;\ ?d&lt;/em&gt; || a &amp;gt; 2 ]]; echo $?&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ [[ &amp;ldquo;abc def d,x&amp;rdquo; == a[abc]&lt;em&gt;\ ?d&lt;/em&gt; || a -gt 2 ]]; echo $?&lt;/p&gt;
&lt;p&gt;-bash: a: unbound variable&lt;/p&gt;
&lt;p&gt;条件测试&lt;/p&gt;
&lt;p&gt;虽然使用以上的测试和 &amp;amp;&amp;amp;、 || 控制操作符能实现许多编程，但 bash 还包含了更熟悉的 “if, then, else” 和 case 结构。学习完这些之后，将学习循环结构，这样您的工具箱将真正得到扩展。&lt;/p&gt;
&lt;p&gt;If、then、else 语句&lt;/p&gt;
&lt;p&gt;bash 的 if 命令是个复合命令，它测试一个测试或命令（$?）的返回值，并根据返回值为 True（0）或 False（不为 0）进行分支。虽然上面的测试只返回 0 或 1 值，但命令可能返回其他值。请参阅 LPI exam 102 prep: Shells, scripting, programming, and compiling 教程学习这方面的更多内容。&lt;/p&gt;
&lt;p&gt;Bash 中的 if 命令有一个 then 子句，子句中包含测试或命令返回 0 时要执行的命令列表，可以有一个或多个可选的 elif 子句，每个子句可执行附加的测试和一个 then 子句，子句中又带有相关的命令列表，最后是可选的 else 子句及命令列表，在前面的测试或 elif 子句中的所有测试都不为真的时候执行，最后使用 fi 标记表示该结构结束。&lt;/p&gt;
&lt;p&gt;使用迄今为止学到的东西，现在能够构建简单的计算器来计算算术表达式，如清单 9 所示：&lt;/p&gt;
&lt;p&gt;清单 9. 用 if、then、else 计算表达式&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ function mycalc ()&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;local x&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;if [ $# -lt 1 ]; then&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;echo &amp;ldquo;This function evaluates arithmetic for you if you give it some&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;elif (( $* )); then&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;let x=&amp;quot;$*&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;echo &amp;ldquo;$* = $x&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;else&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;echo &amp;ldquo;$* = 0 or is not an arithmetic expression&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;fi&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 3 + 4&lt;/p&gt;
&lt;p&gt;3 + 4 = 7&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 3 + 4**3&lt;/p&gt;
&lt;p&gt;3 + 4**3 = 67&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 3 + (4**3 /2)&lt;/p&gt;
&lt;p&gt;-bash: syntax error near unexpected token `(&#39;&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 3 + &amp;ldquo;(4**3 /2)&amp;rdquo;&lt;/p&gt;
&lt;p&gt;3 + (4**3 /2) = 35&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc xyz&lt;/p&gt;
&lt;p&gt;xyz = 0 or is not an arithmetic expression&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc xyz + 3 + &amp;ldquo;(4**3 /2)&amp;rdquo; + abc&lt;/p&gt;
&lt;p&gt;xyz + 3 + (4**3 /2) + abc = 35&lt;/p&gt;
&lt;p&gt;这个计算器利用 local 语句将 x 声明为局部变量，只能在 mycalc 函数的范围内使用。let 函数具有几个可用的选项，可以执行与它密切关联的 declare 函数。请参考 bash 手册或使用 help let 获得更多信息。&lt;/p&gt;
&lt;p&gt;如清单 9 所示，需要确保在表达式使用 shell 元字符 —— 例如(、)、*、&amp;gt; 和 &amp;lt; 时 —— 正确地对表达式转义。无论如何，现在有了一个非常方便的小计算器，可以像 shell 那样进行算术计算。&lt;/p&gt;
&lt;p&gt;在清单 9 中可能注意到 else 子句和最后的两个示例。可以看到，把 xyz 传递给 mycalc 并没有错误，但计算结果为 0。这个函数还不够灵巧，不能区分最后使用的示例中的字符值，所以不能警告用户。可以使用字符串模式匹配测试（例如&lt;/p&gt;
&lt;p&gt;[[ ! (&amp;quot;$*&amp;quot; == &lt;em&gt;[a-zA-Z]&lt;/em&gt; ]]&lt;/p&gt;
&lt;p&gt;， 或使用适合自己范围的形式）消除包含字母表字符的表达式，但是这会妨碍在输入中使用 16 进制标记，因为使用 16 进制标记时可能要用 0x0f 表示 15。实际上，shell 允许的基数最高为 64（使用 base#value 标记），所以可以在输入中加入 _ 和 @ 合法地使用任何字母表字符。8 进制和 16 进制使用常用的标记方式，开头为 0 表示八进制，开头为 0x 或 0X 表示 16 进制。清单 10 显示了一些示例。&lt;/p&gt;
&lt;p&gt;清单 10. 用不同的基数进行计算&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 015&lt;/p&gt;
&lt;p&gt;015 = 13&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 0xff&lt;/p&gt;
&lt;p&gt;0xff = 255&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 29#37&lt;/p&gt;
&lt;p&gt;29#37 = 94&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 64#1az&lt;/p&gt;
&lt;p&gt;64#1az = 4771&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 64#1azA&lt;/p&gt;
&lt;p&gt;64#1azA = 305380&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 64#1azA_@&lt;/p&gt;
&lt;p&gt;64#1azA_@ = 1250840574&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ mycalc 64#1az*64**3 + 64#A_@&lt;/p&gt;
&lt;p&gt;64#1az*64**3 + 64#A_@ = 1250840574&lt;/p&gt;
&lt;p&gt;对输入进行的额外处理超出了本技巧的范围，所以请小心使用这个计算器。&lt;/p&gt;
&lt;p&gt;elif 语句非常方便。它允许简化缩进，从而有助于脚本编写。在清单 11 中可能会对 type 命令在 mycalc 函数中的输出感到惊讶。&lt;/p&gt;
&lt;p&gt;清单 11. Type mycalc&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ type mycalc&lt;/p&gt;
&lt;p&gt;mycalc is a function&lt;/p&gt;
&lt;p&gt;mycalc ()&lt;/p&gt;
&lt;p&gt;{&lt;/p&gt;
&lt;p&gt;local x;&lt;/p&gt;
&lt;p&gt;if [ $# -lt 1 ]; then&lt;/p&gt;
&lt;p&gt;echo &amp;ldquo;This function evaluates arithmetic for you if you give it some&amp;rdquo;;&lt;/p&gt;
&lt;p&gt;else&lt;/p&gt;
&lt;p&gt;if (( $* )); then&lt;/p&gt;
&lt;p&gt;let x=&amp;quot;$*&amp;quot;;&lt;/p&gt;
&lt;p&gt;echo &amp;ldquo;$* = $x&amp;rdquo;;&lt;/p&gt;
&lt;p&gt;else&lt;/p&gt;
&lt;p&gt;echo &amp;ldquo;$* = 0 or is not an arithmetic expression&amp;rdquo;;&lt;/p&gt;
&lt;p&gt;fi;&lt;/p&gt;
&lt;p&gt;fi&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;当 然，也可以只用 $(( 表达式 )) 和 echo 命令进行 shell 算术运算，如清单 12 所示。这样就不必学习关于函数或测试的任何内容，但是请注意 shell 不会解释元字符，例如 *，因此元字符不能在 (( 表达式 )) 或 [[ 表达式 ]] 中那样正常发挥作用。&lt;/p&gt;
&lt;p&gt;清单 12. 在 shell 中用 echo 和 $(( )) 直接进行计算&lt;/p&gt;
&lt;p&gt;[ian@pinguino ~]$ echo $((3 + (4**3 /2)))&lt;/p&gt;- https://blog.oyyko.com/posts/bash/ - </description>
        </item>
    
    
    
        <item>
        <title>In archlinux, chrome cannot be displayed normally under AMD.</title>
        <link>https://blog.oyyko.com/posts/chrome_amd/</link>
        <pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://blog.oyyko.com/posts/chrome_amd/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/chrome_amd/ -&lt;p&gt;Solution:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rm -rf .config/google-chrome/Default/GPUCache
&lt;/code&gt;&lt;/pre&gt;- https://blog.oyyko.com/posts/chrome_amd/ - </description>
        </item>
    
    
    
        <item>
        <title>链接 Note 1</title>
        <link>https://blog.oyyko.com/posts/link1/</link>
        <pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate>
        
        <guid>https://blog.oyyko.com/posts/link1/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/link1/ -&lt;p&gt;链接的笔记&lt;/p&gt;
&lt;p&gt;本文部分信息来自网络&lt;/p&gt;
&lt;h2 id=&#34;bss段不占用存储空间&#34;&gt;.bss段不占用存储空间&lt;/h2&gt;
&lt;p&gt;为什么要有.bss段？因为已经初始化的全局变量，需要在目标文件里面占用空间来存储它们被初始化的值。例如&lt;code&gt;int a=3,b=2;&lt;/code&gt;我们需要存下3和2. 但是如果是没有初始化的全局变量，只需要记录一下长度就会好了。例如两个int，记录一些.bss段的长度为8字节即可。&lt;/p&gt;
&lt;p&gt;那么，这个长度总要占地方的吧？&lt;/p&gt;
&lt;p&gt;.bss段占据的大小存放在ELF文件格式中的段表(Section Table)中，段表存放了各个段的各种信息，比如段的名字、段的类型、段在elf文件中的偏移、段的大小等信息。同时符号存放在符号表.symtab中。&lt;/p&gt;
&lt;p&gt;.bss不占据实际的磁盘空间，只在段表中记录大小，在符号表中记录符号。当文件加载运行时，才分配空间以及初始化。&lt;/p&gt;
&lt;h2 id=&#34;程序为什么要分成数据段和代码段&#34;&gt;程序为什么要分成数据段和代码段&lt;/h2&gt;
&lt;p&gt;数据和指令被映射到两个虚拟内存区域，数据段对进程来说可读写，代码段是只读，这样可以防止程序的指令被有意无意的改写。&lt;/p&gt;
&lt;p&gt;有利于提高程序局部性，现代CPU缓存一般被设计成数据缓存和指令缓存分离，分开对CPU缓存命中率有好处。&lt;/p&gt;
&lt;p&gt;代码段是可以共享的，数据段是私有的，当运行多个程序的副本时，只需要保存一份代码段部分。&lt;/p&gt;
&lt;h2 id=&#34;链接器通过什么进行的链接&#34;&gt;链接器通过什么进行的链接&lt;/h2&gt;
&lt;p&gt;链接的接口是符号，在链接中，将函数和变量统称为符号，函数名和变量名统称为符号名。链接过程的本质就是把多个不同的目标文件之间相互“粘”到一起，像玩具积木一样各有凹凸部分，有固定的规则可以拼成一个整体。&lt;/p&gt;
&lt;p&gt;可以将符号看作是链接中的粘合剂，整个链接过程基于符号才可以正确完成，符号有很多类型，主要有局部符号和外部符号，局部符号只在编译单元内部可见，对于链接过程没有作用，在目标文件中引用的全局符号，却没有在本目标文件中被定义的叫做外部符号，以及定义在本目标文件中的可以被其它目标文件引用的全局符号，在链接过程中发挥重要作用。&lt;/p&gt;
&lt;h2 id=&#34;为什么需要extern-c&#34;&gt;为什么需要extern &amp;ldquo;C&amp;rdquo;&lt;/h2&gt;
&lt;p&gt;C语言函数和变量的符号名基本就是函数名字变量名字，不同模块如果有相同的函数或变量名字就会产生符号冲突无法链接成功的问题，所以C++引入了命名空间来解决这种符号冲突问题。同时为了支持函数重载C++也会根据函数名字以及命名空间以及参数类型生成特殊的符号名称。&lt;/p&gt;
&lt;p&gt;由于C语言和C++的符号修饰方式不同，C语言和C++的目标文件在链接时可能会报错说找不到符号，所以为了C++和C兼容，引入了extern &amp;ldquo;C&amp;rdquo;，当引用某个C语言的函数时加extern &amp;ldquo;C&amp;quot;告诉编译器对此函数使用C语言的方式来链接，如果C++的函数用extern &amp;ldquo;C&amp;quot;声明，则此函数的符号就是按C语言方式生成的。&lt;/p&gt;
&lt;p&gt;以memset函数举例，C语言中以C语言方式来链接，但是在C++中以C++方式来链接就会找不到这个memset的符号，所以需要使用extern &amp;ldquo;C&amp;quot;方式来声明这个函数，为了兼容C和C++，可以使用宏来判断，用条件宏判断当前是不是C++代码，如果是C++代码则extern &amp;ldquo;C&amp;rdquo;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;#ifdef __cplusplus
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ef8383&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#00b1f7&#34;&gt;memset&lt;/span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;*&lt;/span&gt;, &lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#c1abea&#34;&gt;size_t&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;#ifdef __cplusplus
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;强符号和弱符号&#34;&gt;强符号和弱符号&lt;/h2&gt;
&lt;p&gt;我们经常编程中遇到的multiple definition of &amp;lsquo;xxx&amp;rsquo;，指的是多个目标中有相同名字的全局符号的定义，产生了冲突，这种符号的定义指的是强符号。有强符号自然就有弱符号，编译器默认函数和初始化了的全局变量为强符号，未初始化的全局变量为弱符号。attribute((weak))可以定义弱符号。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;ext&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;weak&lt;/span&gt;; &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// 弱符号
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;strong&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;; &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// 强符号
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;__attribute__&lt;/span&gt;((&lt;span style=&#34;color:#c1abea&#34;&gt;weak&lt;/span&gt;)) &lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;weak2&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;2&lt;/span&gt;; &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// 弱符号
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;链接器规则：&lt;/p&gt;
&lt;p&gt;不允许强符号被多次定义，多次定义就会multiple definition of &amp;lsquo;xxx&amp;rsquo;
一个符号在一个目标文件中是强符号，在其它目标文件中是弱符号，选择强符号
一个符号在所有目标文件中都是弱符号，选择占用空间最大的符号，int类型和double类型选double类型&lt;/p&gt;
&lt;h2 id=&#34;强引用和弱引用&#34;&gt;强引用和弱引用&lt;/h2&gt;
&lt;p&gt;一般引用了某个函数符号，而这个函数在任何地方都没有被定义，则会报错error: undefined reference to &amp;lsquo;xxx&amp;rsquo;，这种符号引用称为强引用。与此对应的则有弱引用，链接器对强引用弱引用的处理过程几乎一样，只是对于未定义的弱引用，链接器不会报错，而是默认其是一个特殊的值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;__attribute__&lt;/span&gt;((&lt;span style=&#34;color:#c1abea&#34;&gt;weak&lt;/span&gt;)) &lt;span style=&#34;color:#ef8383&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;foo&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;main&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#d26464;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;foo&lt;/span&gt;); &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;foo&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这里foo的地址是0&lt;/p&gt;
&lt;p&gt;则可以改为&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;__attribute__&lt;/span&gt; ((&lt;span style=&#34;color:#c1abea&#34;&gt;weak&lt;/span&gt;)) &lt;span style=&#34;color:#ef8383&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;foo&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;main&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#c1abea&#34;&gt;foo&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c1abea&#34;&gt;foo&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c678dd&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这种强引用弱引用对于库来说十分有用，库中的弱引用可以被用户定义的强引用所覆盖，这样程序就可以使用自定义版本的库函数，可以将引用定义为弱引用，如果去掉了某个功能，也可以正常连接接，想增加相应功能还可以直接增加强引用，方便程序的裁剪和组合。&lt;/p&gt;
&lt;p&gt;例如再加一个文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ef8383&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;foo&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;printf&lt;/span&gt;(&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;foo2&lt;/span&gt;&lt;span style=&#34;color:#d26464;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个时候就可以&lt;code&gt;g++ 1.cpp 2.cpp&lt;/code&gt;从而得到一个可以输出&lt;code&gt;foo2&lt;/code&gt;的可执行文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;弱符号的出现主要是为了解决宏条件编译问题的,宏条件编译对于长期维护的代码是个灾难。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;程序首先执行的代码并不是main开始的代码，也就是程序的真正入口不是main函数，而是运行库的入口函数；运行库会 先把main函数需要的参数、环境变量等准备好；然后将标准输入输出文件描述符打开，这样才能保证main函数开始就可以使用printf；然后把堆初始化，这样才能保证程序可以自由地执行malloc、new等；还有就是把全局变量初始化、全局构造函数执行完；做完这么多工作之后运行库就执行回调函数main，这时候程序才开始进入人们常说的函数入口。程序的运行环境组成是：程序本身逻辑代码、运行库、系统内核、内存；内存分为用户空间和内核空间，只要内核才使用内核空间，其它的包括运行库都是使用用户空间；程序运行空间分为栈空间和堆空间，函数运行的环境就是栈空间，栈空间都是有固定大小的，一般是2M，地址增加方向是向低地址扩张；堆空间比较大，使用也很灵活，这个堆空间一般都是运行库在帮你管理，堆分配算中中最简单的就是空闲链表算法；程序运行完之后，运行库还要帮你把所有的后事处理掉，释放堆空间、关闭所有打开的文件描述符、释放所有的进程资源等，这就是进程关闭内存泄漏的那些空间能够得到回收的原因；从程序的整个过程可以看书，main函数只不过是运行库的一个回调函数，不是真正的函数入口，当然我们也可以自己写一个运行库，这样就可以直接运行在系统内核之上了，运行库主要部分就是标准c接口的实现，听上去并不复杂。&lt;/p&gt;
&lt;h2 id=&#34;动态和静态的比较&#34;&gt;动态和静态的比较&lt;/h2&gt;
&lt;p&gt;动态链接库有两个设计目标，也是它的优势：&lt;/p&gt;
&lt;p&gt;动态链接。例如MySQL支持MyISAM和InodeDB等不同的存储引擎，你也可以为它添加新的存储引擎，那么这个存储引擎就只能编译成动态链接库的形式。因为MySQL释出（release）的时候，还不知道有会有谁为它写新的存储引擎，所以也不知道应该链接那个静态库。当然，MySQL有源码，你可以重新编译一下，把你的新存储引擎链接进去，但是像Oracle这种没有源码的程序，就只能用动态链接库解决这个问题了。&lt;/p&gt;
&lt;p&gt;共享，节约内存。例如libc.so提供了基础的C语言函数和系统调用接口，每个应用程序都会用到，如果每个进程都用静态库，那么printf这个函数的代码在内存中会有许多份，每个进程都有一个副本。使用动态链接库就可以避免这个问题，同一个动态链接库在多个不同进程之间的代码是共享的，不会占用多余的内存空间。数据不是共享的，每个进程都有自己的独有数据。&lt;/p&gt;
&lt;p&gt;缺点1、当系统中多个应用程序都用了一个动态链接库，但是要求的版本不同，这时动态链接库之间就会相互干扰。2、性能开销。动态链接库为了做到“共享代码，但是不共享数据”，引入了不小的开销，调用动态链接库中的函数，需要好几次间接内存访问才能走到函数入口，全局数据也是。&lt;/p&gt;
&lt;p&gt;静态链接的优缺点：&lt;/p&gt;
&lt;p&gt;优点：代码装载速度快，执行速度略比动态链接库快；只需保证在开发者的计算机中有正确的.lib文件，在以二进制形式发布程序时不需考虑在用户的计算机上.lib文件是否存在及版本问题。&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;使用静态链接生成的可执行文件体积较大，包含相同的公共代码，造成浪费。&lt;/p&gt;
&lt;p&gt;静态库对程序的更新、部署和发布会带来麻烦。如果静态库liba.lib更新了，所有使用它的应用程序都需要重新编译、发布给用户（对于玩家来说，可能是一个很小的改动，却导致整个程序重新下载，全量更新）&lt;/p&gt;
&lt;p&gt;动态库在程序编译时并不会被连接到目标代码中，而是在程序运行是才被载入。不同的应用程序如果调用相同的库，那么在内存里只需要有一份该共享库的实例，规避了空间浪费问题。动态库在程序运行是才被载入，也解决了静态库对程序的更新、部署和发布页会带来麻烦。用户只需要更新动态库即可，增量更新。&lt;/p&gt;
&lt;p&gt;动态链接的优缺点：&lt;/p&gt;
&lt;p&gt;优点：生成的可执行文件较静态链接生成的可执行文件小；适用于大规模的软件开发，使开发过程独立、耦合度小，便于不同开发者和开发组织之间进行开发和测试；不同编程语言编写的程序只要按照函数调用约定就可以调用同一个DLL函数；DLL文件与EXE文件独立，只要输出接口不变（即名称、参数、返回值类型和调用约定不变），更换DLL文件不会对EXE文件造成任何影响，因而极大地提高了可维护性和可扩展性；&lt;/p&gt;
&lt;p&gt;缺点：使用动态链接库的应用程序不是自完备的，它依赖的DLL模块也要存在，如果使用载入时动态链接，程序启动时发现DLL不存在，系统将终止程序并给出错误信息；速度比静态链接慢；&lt;/p&gt;
&lt;p&gt;为什么要进行动态链接？为了解决静态链接浪费空间和更新困难的缺点。&lt;/p&gt;
&lt;p&gt;动态链接的方式？装载时重定位和地址无关代码技术。&lt;/p&gt;
&lt;p&gt;地址无关代码技术原理？通过GOT段实现间接跳转。&lt;/p&gt;
&lt;p&gt;延迟加载技术原理？对外部函数符号通过PLT段实现延迟绑定及间接跳转。&lt;/p&gt;
&lt;p&gt;如何进行显式运行时链接？通过&amp;lt;dlfcn.h&amp;gt;头文件中的四个函数。&lt;/p&gt;- https://blog.oyyko.com/posts/link1/ - </description>
        </item>
    
    
    
        <item>
        <title>C&#43;&#43; Note 3</title>
        <link>https://blog.oyyko.com/posts/cpp3/</link>
        <pubDate>Tue, 22 Feb 2022 00:00:00 +0000</pubDate>
        
        <guid>https://blog.oyyko.com/posts/cpp3/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/cpp3/ -&lt;p&gt;本文是我的C++笔记的第三篇
My Thrid C++ Note;&lt;/p&gt;
&lt;h2 id=&#34;explict&#34;&gt;explict&lt;/h2&gt;
&lt;p&gt;防止类的构造函数的隐式转换&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#76a9f9&#34;&gt;A&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;x&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;x_&lt;/span&gt;)&lt;span style=&#34;color:#c7bf54&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;x&lt;/span&gt;{&lt;span style=&#34;color:#c1abea&#34;&gt;x_&lt;/span&gt;} {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// YES
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;a2&lt;/span&gt;{&lt;span style=&#34;color:#d19a66&#34;&gt;3&lt;/span&gt;}; &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// YES
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这样是对的&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#76a9f9&#34;&gt;A&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;x&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;explict&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;x_&lt;/span&gt;)&lt;span style=&#34;color:#c7bf54&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;x&lt;/span&gt;{&lt;span style=&#34;color:#c1abea&#34;&gt;x_&lt;/span&gt;} {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d19a66&#34;&gt;3&lt;/span&gt;; &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// NO
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;a&lt;/span&gt;{&lt;span style=&#34;color:#d19a66&#34;&gt;3&lt;/span&gt;}; &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;//YES
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;析构函数-移动构造-和-emplace_back&#34;&gt;析构函数 移动构造 和 emplace_back&lt;/h2&gt;
&lt;p&gt;下列代码&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#76a9f9&#34;&gt;A&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;x&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c678dd&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt;(&lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;xx&lt;/span&gt;) &lt;span style=&#34;color:#c7bf54&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;x&lt;/span&gt;{&lt;span style=&#34;color:#c1abea&#34;&gt;xx&lt;/span&gt;} {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt;() &lt;span style=&#34;color:#c7bf54&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt;(&lt;span style=&#34;color:#d19a66&#34;&gt;0&lt;/span&gt;) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c7bf54&#34;&gt;~&lt;/span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt;() { &lt;span style=&#34;color:#c1abea&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;goodbye &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;endl&lt;/span&gt;; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ef8383&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00b1f7&#34;&gt;main&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;v&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#c1abea&#34;&gt;emplace_back&lt;/span&gt;(&lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt;{&lt;span style=&#34;color:#d19a66&#34;&gt;0&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#c1abea&#34;&gt;emplace_back&lt;/span&gt;(&lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt;{&lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#c1abea&#34;&gt;emplace_back&lt;/span&gt;(&lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt;{&lt;span style=&#34;color:#d19a66&#34;&gt;2&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;--------------------------------------&lt;/span&gt;&lt;span style=&#34;color:#d26464;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// OUTPUT
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// goodbye 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// goodbye 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// goodbye 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// goodbye 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// goodbye 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// goodbye 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// --------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// goodbye 0
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// goodbye 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;// goodbye 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#8a93a5;font-style:italic&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其原因在于：
首先:&lt;code&gt;emplace_back&lt;/code&gt;只有在传入构造参数列表的时候和&lt;code&gt;push_back&lt;/code&gt;有区别。其他的时候没有区别。
这里相当于先生成临时对象&lt;code&gt;A{0}&lt;/code&gt;，再拷贝构造到v中。从而执行了一次对于0的析构
之后，因为要再加入&lt;code&gt;A{1}&lt;/code&gt;,而目前的v的可用空间大小是1
因此需要再向系统申请一块大小为2的空间。之后再把原来的&lt;code&gt;A{0}&lt;/code&gt;复制过去。再放弃原来的大小为1的地址上的&lt;code&gt;A{0}&lt;/code&gt;,因此又执行一次对于0的析构。之后构造临时对象A1，再复制到v中。则临时对象析构，造成一次对于1的析构。
之后要加入2. 方法一样。先开辟新内存空间，把原来的对象复制过去。再加入2 即可
最终，3个对象的生命周期均到达终点。则依次析构。&lt;/p&gt;
&lt;p&gt;而&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;v&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#c1abea&#34;&gt;reserve&lt;/span&gt;(&lt;span style=&#34;color:#d19a66&#34;&gt;10&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#c1abea&#34;&gt;emplace_back&lt;/span&gt;(&lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt;{&lt;span style=&#34;color:#d19a66&#34;&gt;0&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#c1abea&#34;&gt;emplace_back&lt;/span&gt;(&lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt;{&lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#c1abea&#34;&gt;emplace_back&lt;/span&gt;(&lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt;{&lt;span style=&#34;color:#d19a66&#34;&gt;2&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;在提前预留了空间之后，输出为&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;goodbye 0
goodbye 1
goodbye 2
--------------------------------------
goodbye 0
goodbye 1
goodbye 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们输出capacity即可看到我们的猜测是正确的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#58626f&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;color:#b0c4de;background-color:#282c34;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;vector&lt;/span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt;&lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;v&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;CAPACITY &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#c1abea&#34;&gt;capacity&lt;/span&gt;() &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;endl&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#c1abea&#34;&gt;emplace_back&lt;/span&gt;(&lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt;{&lt;span style=&#34;color:#d19a66&#34;&gt;0&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;CAPACITY &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#c1abea&#34;&gt;capacity&lt;/span&gt;() &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;endl&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#c1abea&#34;&gt;emplace_back&lt;/span&gt;(&lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt;{&lt;span style=&#34;color:#d19a66&#34;&gt;1&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;CAPACITY &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#c1abea&#34;&gt;capacity&lt;/span&gt;() &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;endl&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#c1abea&#34;&gt;emplace_back&lt;/span&gt;(&lt;span style=&#34;color:#c1abea&#34;&gt;A&lt;/span&gt;{&lt;span style=&#34;color:#d19a66&#34;&gt;2&lt;/span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;CAPACITY &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;v&lt;/span&gt;.&lt;span style=&#34;color:#c1abea&#34;&gt;capacity&lt;/span&gt;() &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#c1abea&#34;&gt;endl&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c1abea&#34;&gt;cout&lt;/span&gt; &lt;span style=&#34;color:#c7bf54&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;--------------------------------------&lt;/span&gt;&lt;span style=&#34;color:#d26464;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#98c379&#34;&gt;&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;得到&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;CAPACITY 0
goodbye 0
CAPACITY 1
goodbye 0
goodbye 1
CAPACITY 2
goodbye 0
goodbye 1
goodbye 2
CAPACITY 4
--------------------------------------
goodbye 0
goodbye 1
goodbye 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结论：
emplace_back以参数列表的形式传入时，不论是否有移动构造函数，都是原地构造，只会调用一次构造函数（只有这一项和push_back有区别，其它都是一样的）&lt;/p&gt;
&lt;p&gt;emplace_back以左值对象的形式传入时，不论是否有移动构造函数，都是调用一次拷贝构造函数&lt;/p&gt;
&lt;p&gt;emplace_back以右值对象（例如move（左值对象），或者就是右值）的形式传入时
a. 有移动构造函数，调用一次移动构造
b. 没有移动构造函数，调用拷贝构造函数&lt;/p&gt;
&lt;p&gt;emplace_back以 Person(“aaa”, “shandong”, 1991) 形式传入时
a. 有移动构造函数，构造临时文件 —&amp;gt; 移动构造 —&amp;gt; 临时文件析构
b. 没有移动构造函数，构造临时文件 —&amp;gt; 拷贝构造 —&amp;gt; 临时文件析构&lt;/p&gt;- https://blog.oyyko.com/posts/cpp3/ - </description>
        </item>
    
    
  </channel>
</rss> 