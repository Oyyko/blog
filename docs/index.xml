<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Oyyko&#39;s Blog</title>
    <link>https://blog.oyyko.com/</link>
    <description>Recent content on Oyyko&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 23 Aug 2022 15:20:51 +0800</lastBuildDate>
    
        <atom:link href="https://blog.oyyko.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Value_categories_in_Cpp</title>
        <link>https://blog.oyyko.com/posts/value_categories_in_cpp/</link>
        <pubDate>Tue, 23 Aug 2022 15:20:51 +0800</pubDate>
        
        <guid>https://blog.oyyko.com/posts/value_categories_in_cpp/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/value_categories_in_cpp/ -&lt;h2 id=&#34;intro&#34;&gt;Intro&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080&#34;&gt;#define IS_XVALUE(expr) \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080&#34;&gt;(is_rvalue_reference&amp;lt;decltype((expr))&amp;gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080&#34;&gt;#define IS_PRVALUE(expr) \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080&#34;&gt;(!is_reference&amp;lt;decltype((expr))&amp;gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080&#34;&gt;#define IS_LVALUE(expr) \
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080&#34;&gt;(is_lvalue_reference&amp;lt;decltype((expr))&amp;gt;{})
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;This is a method I recently discovered to determine which value category an &lt;strong&gt;expression&lt;/strong&gt; is. I&amp;rsquo;ll explain why it works later.&lt;/p&gt;
&lt;p&gt;First, let&amp;rsquo;s take a look at value categories in C++.&lt;/p&gt;
&lt;p&gt;One of the most important things you should notice before you start is that value categories are not a property about &lt;strong&gt;values&lt;/strong&gt;, but rather a property about &lt;strong&gt;expressions&lt;/strong&gt;. Actually it depends on how you understand &lt;strong&gt;value&lt;/strong&gt;, I looked through the C++ standard but &lt;strong&gt;it seems they don&amp;rsquo;t define what the term value means&lt;/strong&gt;. However, we all know what an expression is. (in case you don&amp;rsquo;t know, you can refer to cppreference)&lt;/p&gt;
&lt;p&gt;Anyway, there are 3 kinds of value categories. They are called LVALUE, PRVALUE, XVALUE.&lt;/p&gt;
&lt;p&gt;We know you can write x=3 but not 3=x. Since 3 and x are both expressions, there must be some qualitative difference between them. Since x can be placed to the left of the equals sign(assignment sign), so we call it an lvalue. 3 is called an rvalue accordingly.&lt;/p&gt;
&lt;p&gt;OK. Now I know the difference between LVALUE and RVALUE, but what is PRVALUE and XVALUE?&lt;/p&gt;
&lt;p&gt;Well, there are two dimensions to the form of expressions. 1. Does the expression have an identity? 2. Can the expression be moved?&lt;/p&gt;
&lt;p&gt;The one that has identity and can be moved is called XVALUE (eXpiring value).
The one that has identity but cannot be moved is called LVALUE.
The one that has no identity but can be moved is called PRVALUE.&lt;/p&gt;
&lt;p&gt;For example, these are examples for XVALUE:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std&lt;span style=&#34;color:#666&#34;&gt;::&lt;/span&gt;move(x);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a.m, the member of object expression, where a is an rvalue and m is a non&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;static&lt;/span&gt; data member of non&lt;span style=&#34;color:#666&#34;&gt;-&lt;/span&gt;reference type;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;temporary-materialization&#34;&gt;Temporary materialization&lt;/h2&gt;
&lt;p&gt;The most useful example to help you understand XVALUE is: Temporary materialization.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a2f;font-weight:bold&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;S&lt;/span&gt; { &lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; m; };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#0b0;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; S().m; &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;// member access expects glvalue as of C++17;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#080;font-style:italic&#34;&gt;&lt;/span&gt;               &lt;span style=&#34;color:#080;font-style:italic&#34;&gt;// S() prvalue is converted to xvalue
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;As the cppreference goes: A prvalue of any complete type T can be converted to an xvalue of the same type T. This conversion initializes a temporary object of type T from the prvalue by evaluating the prvalue with the temporary object as its result object, and produces an xvalue denoting the temporary object. If T is a class or array of class type, it must have an accessible and non-deleted destructor.&lt;/p&gt;
&lt;p&gt;So the key difference between XVALUE and PRVALUE is that can we &lt;strong&gt;reuse&lt;/strong&gt; the resources of it. We cannot reuse the number 3 or 3.7 but &lt;strong&gt;we can reuse the memory allocated for a temporary string object&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;decltype-and-value-categories&#34;&gt;Decltype and value categories&lt;/h2&gt;
&lt;p&gt;Decltype is a good tool to help us determine the category of an expression.&lt;/p&gt;
&lt;p&gt;Because its behavior is to generate an rvalue reference for XVALUE, an unreferenced type for PRVALUE, and an lvalue reference for LVALUE.&lt;/p&gt;
&lt;p&gt;Well, someone may argue that if &lt;code&gt;int x=3;&lt;/code&gt; then &lt;code&gt;x is an LVALUE but decltype(x) is int itself rather than int&amp;amp;.&lt;/code&gt; That&amp;rsquo;s because the special case for id-expr in the behavior of decltype.&lt;/p&gt;
&lt;p&gt;If the argument is an unparenthesized id-expression or an unparenthesized class member access expression, then decltype yields the type of the entity named by this expression. If there is no such entity, or if the argument names a set of overloaded functions, the program is ill-formed.&lt;/p&gt;
&lt;p&gt;So the right way is &lt;code&gt;int x=3; decltype((x)) xref=x;&lt;/code&gt;. Here the type of &lt;code&gt;xref&lt;/code&gt; is &lt;code&gt;int&amp;amp;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;stdmove&#34;&gt;std::move&lt;/h2&gt;
&lt;p&gt;The famous function &lt;code&gt;move&lt;/code&gt; actually does nothing to do with &amp;ldquo;move something&amp;rdquo;. Actually, it just change the value category of the parameter from LVALUE to XVALUE. In the most cases, you should call move using an LVALUE.&lt;/p&gt;
&lt;p&gt;std::move is used to &lt;strong&gt;indicate&lt;/strong&gt; that an object t may be &amp;ldquo;moved from&amp;rdquo;, i.e. allowing the efficient transfer of resources from t to another object.&lt;/p&gt;
&lt;p&gt;In particular, std::move produces an xvalue expression that identifies its argument t. It is exactly equivalent to a static_cast to an rvalue reference type.&lt;/p&gt;
- https://blog.oyyko.com/posts/value_categories_in_cpp/ - </description>
        </item>
    
    
    
        <item>
        <title>Revisit_OS</title>
        <link>https://blog.oyyko.com/posts/revisit_os/</link>
        <pubDate>Sat, 20 Aug 2022 16:05:28 +0800</pubDate>
        
        <guid>https://blog.oyyko.com/posts/revisit_os/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/revisit_os/ -&lt;p&gt;For some reason, I&amp;rsquo;ve been reviewing OS related stuff lately.&lt;/p&gt;
&lt;h2 id=&#34;hardlink-and-softlink&#34;&gt;hardlink and softlink&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;../hardlink.jpg&#34; alt=&#34;hardlink and softlink&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ln&lt;/code&gt; creates hark links.
&lt;code&gt;ln -s&lt;/code&gt; creates soft (a.k.a symbolic) links.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ln -l&lt;/code&gt; show the number of hardlinks points to the same inode.&lt;/p&gt;
&lt;p&gt;hardlink points to the inode.
softlink points to the path.&lt;/p&gt;
&lt;p&gt;pros and cons:
hardlink must be on the same partition, can only link to files.
softlink can link to a file or directory, no partition limitation.&lt;/p&gt;
&lt;p&gt;Hard links are only valid within the same File System. Symbolic links can span file systems as they are simply the name of another file.&lt;/p&gt;
&lt;p&gt;Underneath the file system, files are represented by inodes.&lt;/p&gt;
&lt;p&gt;A file in the file system is basically a link to an inode.
A hard link, then, just creates another file with a link to the same underlying inode.&lt;/p&gt;
&lt;p&gt;When you delete a file, it removes one link to the underlying inode. The inode is only deleted (or deletable/over-writable) when all links to the inode have been deleted.&lt;/p&gt;
&lt;p&gt;A symbolic link is a link to another name in the file system.&lt;/p&gt;
&lt;p&gt;Once a hard link has been made the link is to the inode. Deleting, renaming, or moving the original file will not affect the hard link as it links to the underlying inode. Any changes to the data on the inode is reflected in all files that refer to that inode.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#a2f&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; ✗ touch &lt;span style=&#34;color:#666&#34;&gt;111&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;222&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#a2f&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; ✗ &lt;span style=&#34;color:#a2f&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;111&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#666&#34;&gt;111&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#a2f&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; ✗ &lt;span style=&#34;color:#a2f&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;222&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#666&#34;&gt;222&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#a2f&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; ✗ ln &lt;span style=&#34;color:#666&#34;&gt;111&lt;/span&gt; l111   
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#a2f&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; ✗ ln -s &lt;span style=&#34;color:#666&#34;&gt;222&lt;/span&gt; s222
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#a2f&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; ✗ ls            
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#666&#34;&gt;111&lt;/span&gt;  &lt;span style=&#34;color:#666&#34;&gt;222&lt;/span&gt;  l111  s222
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;➜  &lt;span style=&#34;color:#a2f&#34;&gt;test&lt;/span&gt; git:&lt;span style=&#34;color:#666&#34;&gt;(&lt;/span&gt;main&lt;span style=&#34;color:#666&#34;&gt;)&lt;/span&gt; ✗ ls -l
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;总计 &lt;span style=&#34;color:#666&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; zhangjia zhangjia &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;  8月20日 16:46 &lt;span style=&#34;color:#666&#34;&gt;111&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; zhangjia zhangjia &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;  8月20日 16:46 &lt;span style=&#34;color:#666&#34;&gt;222&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-r--r-- &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt; zhangjia zhangjia &lt;span style=&#34;color:#666&#34;&gt;4&lt;/span&gt;  8月20日 16:46 l111
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lrwxrwxrwx &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt; zhangjia zhangjia &lt;span style=&#34;color:#666&#34;&gt;3&lt;/span&gt;  8月20日 16:46 s222 -&amp;gt; &lt;span style=&#34;color:#666&#34;&gt;222&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Now, why the soft link&amp;rsquo;s file mode is lrwxrwxrwx.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;l&lt;/code&gt; means soft link. The rest is same to a normal file mode.&lt;/p&gt;
&lt;h2 id=&#34;file-system&#34;&gt;file system&lt;/h2&gt;
- https://blog.oyyko.com/posts/revisit_os/ - </description>
        </item>
    
    
    
        <item>
        <title>Using Cpp17 or higher version of Cpp on Vscode extension Clangd</title>
        <link>https://blog.oyyko.com/posts/use-cpp17-on-vscode-clangd/</link>
        <pubDate>Sun, 07 Aug 2022 21:49:29 +0800</pubDate>
        
        <guid>https://blog.oyyko.com/posts/use-cpp17-on-vscode-clangd/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/use-cpp17-on-vscode-clangd/ -&lt;p&gt;Recently I&amp;rsquo;ve switched my code completion tool in VScode from Microsoft&amp;rsquo;s official plugin to clangd. On the one hand, clangd can provide a better user experience, on the other hand, I also use this plugin in my company.&lt;/p&gt;
&lt;p&gt;I joked to myself: Two of the most interesting things I learned when I interned at the company were that indentation changed from four spaces to two, and braces changed from wrap to no wrap.&lt;/p&gt;
&lt;p&gt;Now, there is a problem. I installed clangd, switched over and everything worked fine. But when I use string_view, clangd told me it didn&amp;rsquo;t recognize this thing. I quickly realized that this is due to the fact that the default Cpp version of clangd is still 14. So changing its default version became something I had to do.&lt;/p&gt;
&lt;p&gt;I googled but didn&amp;rsquo;t find any useful information.&lt;/p&gt;
&lt;p&gt;I try to use compile_commands.json file. But on the one hand, it needs to be configured separately for each project, while the effect I expect is to use Cpp17 for any file that is opened at random. On the other hand, it turns out that it does not work. (maybe I didn&amp;rsquo;t configure it properly)&lt;/p&gt;
&lt;p&gt;So, here is the final solution.&lt;/p&gt;
&lt;p&gt;Open (create if not already there) &lt;code&gt;~/.config/clangd/config.yaml&lt;/code&gt;
and write the following information&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;CompileFlags&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;Add&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;[-std=c++20]&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;Cool. Now let&amp;rsquo;s have fun with Cpp20.&lt;/p&gt;
- https://blog.oyyko.com/posts/use-cpp17-on-vscode-clangd/ - </description>
        </item>
    
    
    
        <item>
        <title>About</title>
        <link>https://blog.oyyko.com/about/</link>
        <pubDate>Sun, 24 Jul 2022 16:00:55 +0800</pubDate>
        
        <guid>https://blog.oyyko.com/about/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/about/ -&lt;p&gt;hi. Oyyko here.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;Archive&amp;rdquo; page shows all posts in chronological order.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;Tags&amp;rdquo; page shows all tags.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;About&amp;rdquo; page, as you can see, is an introduction to this website.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;:Life&amp;rdquo; page includes articles which records my thinking in daily life and is more personal.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;:Coding&amp;rdquo; page includes articles that are more code-oriented and technical, such as algorithm puzzles, IDE usage tips, environment configuration, and these posts are more practical, maybe not containing deep ideas but just some tips for using tools like complier or programming languages.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;:Study&amp;rdquo; page includes articles that are more abstract and profound. Such as incomprehensible concepts in programming languages, pros and cons between languages, compiler implementations, concepts in advanced mathematics, and the analysis of operating system principles. These are more esoteric and worth reading. In contrast, the :Coding page is more of a personal note.&lt;/p&gt;
&lt;p&gt;:Coding articles are written for convenience. The purpose of writing :Study articles is to record and inspire thinking. The reader of the former is assumed to be myself, the reader of the latter is assumed to be you.&lt;/p&gt;
- https://blog.oyyko.com/about/ - </description>
        </item>
    
    
    
        <item>
        <title>First Post</title>
        <link>https://blog.oyyko.com/posts/first-post/</link>
        <pubDate>Sun, 24 Jul 2022 00:37:35 +0800</pubDate>
        
        <guid>https://blog.oyyko.com/posts/first-post/</guid>
        <description>Oyyko&#39;s Blog https://blog.oyyko.com/posts/first-post/ -&lt;h2 id=&#34;新博客&#34;&gt;新博客&lt;/h2&gt;
&lt;p&gt;决定把博客切换到hugo。也算是人生路上一个新的开始。&lt;/p&gt;
- https://blog.oyyko.com/posts/first-post/ - </description>
        </item>
    
    
  </channel>
</rss> 