<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>scheme on Oyyko&#39;s Blog</title>
    <link>https://blog.oyyko.com/tags/scheme/</link>
    <description>Recent content in scheme on Oyyko&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 04 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.oyyko.com/tags/scheme/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Scheme Review 1</title>
      <link>https://blog.oyyko.com/posts/scheme/</link>
      <pubDate>Tue, 04 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://blog.oyyko.com/posts/scheme/</guid>
      <description>https://courses.cs.washington.edu/courses/cse341/04wi/lectures/14-scheme-quote.html
Quote Scheme has a convenient syntax for representing data literals: prefix any expression with &amp;rsquo; (single quote) and the expression, rather than being evaluated, will be returned as data:
1 2 3 4 5 6 7 8 9 10 11 12 13 &amp;#39;3 ; =&amp;gt; 3 (a number) &amp;#39;&amp;#34;hi&amp;#34; ; =&amp;gt; &amp;#34;hi&amp;#34; (a string) &amp;#39;a ; =&amp;gt; a (a symbol) &amp;#39;(+ 3 4) ; =&amp;gt; (list &amp;#39;+ &amp;#39;3 &amp;#39;4) (a list) &amp;#39;(a b c) ; =&amp;gt; (list &amp;#39;a &amp;#39;b &amp;#39;c) (a list) &amp;#39;(define x 25) (a list) ; =&amp;gt; (list &amp;#39;define &amp;#39;x &amp;#39;25) ; =&amp;gt; (list &amp;#39;define &amp;#39;x 25) &amp;#39;(lambda (x) (+ x 3)) (a list) ; =&amp;gt; (list &amp;#39;lambda (list &amp;#39;x) (list &amp;#39;+ &amp;#39;x &amp;#39;3)) ; =&amp;gt; (list &amp;#39;lambda (list &amp;#39;x) (list &amp;#39;+ &amp;#39;x 3)) As these examples illustrate, &amp;ldquo;quoted&amp;rdquo; data remains unevaluated, and provides a convenient way of representing Scheme programs.</description>
    </item>
    
  </channel>
</rss>
