<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Leetcode on Oyyko&#39;s Blog</title>
    <link>https://blog.oyyko.com/tags/leetcode/</link>
    <description>Recent content in Leetcode on Oyyko&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 30 Nov 2021 15:20:51 +0800</lastBuildDate><atom:link href="https://blog.oyyko.com/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>二分总结</title>
      <link>https://blog.oyyko.com/posts/bisection/</link>
      <pubDate>Tue, 30 Nov 2021 15:20:51 +0800</pubDate>
      
      <guid>https://blog.oyyko.com/posts/bisection/</guid>
      <description>##　Leetcode 704 二分查找target
这种是在一个元素各不相同的有序数组里面找一个等于target的数 解法：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Solution { public: int search(vector&amp;lt;int&amp;gt; &amp;amp;nums, int target) { int l{0}; int r = nums.size() - 1; int mid; while (l &amp;lt;= r) { mid = (l + (r - l) / 2); if (nums[mid] == target) { return mid; } if (target &amp;lt; nums[mid]) { r = mid - 1; } else { l = mid + 1; } } return -1; } }; 此时，分三种情况。注意到，在不等于的时候，r和l都对mid有排斥</description>
    </item>
    
  </channel>
</rss>
